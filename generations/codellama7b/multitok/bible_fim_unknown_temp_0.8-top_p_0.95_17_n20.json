{"content": [": 31,\n  '2 Samuel': 24,\n  '1 Kings': 22,\n  '2 Kings': 25,\n  '1 Chronicles': 29,\n  '2", " 16,\n  '1 Corinthians': 16,\n  '2 Corinthians': 13,\n  Galatians: 6,\n  Ephesians: 6,\n  Philipp", " 28,\n  '2 Corinthians': 13,\n  Galatians: 6,\n  Ephesians: 6,\n  Philippians: 4,\n  Colossians:", ": 13,\n  Ephesians: 6,\n  Philippians: 4,\n  Colossians: 4,\n  '1 Thessalonians': 5,\n  '2", " |\n  '2 Thessalonians'\n  | '1 Timothy'\n  | '2 Timothy'\n  | 'Titus'\n  | 'Philemon'\n  | 'Hebrew", ": 10,\n  14: 10,\n  15: 10,\n  16: 10,\n  17: 10,\n  18: 10,", " {  <SUF> = string;\n\nexport const getBookTitleFromSlug = (\n  bookTitle: BookTitle |  <SUF>,\n): BookTitle => {\n  if (typeof bookTitle !== 'string') {\n   ", "\n  // \"Zechariah\",\n  // \"Malachi\",\n  \"Matthew\",\n  \"Mark\",\n  \"Luke\",\n  \"John\",\n  \"Acts\",\n  \"Romans", " 7,\n  3: 7,\n  4: 5,\n  5: 5,\n  6: 5,\n  7: 4,\n  8: 4,\n  9: ", "4,\n  4: 6,\n  5: 4,\n  6: 4,\n  7: 5,\n  8: 6,\n  9: 11,\n  10:", "9) {\n      bookTitle = 'Genesis';\n    } else if (book === 10) {\n      bookTitle = 'Exodus';\n    } else if (book === 11) {\n     ", "Scriptures: { [key: string]: BookInfo } = {};\n\nfor (const book of hebrewScriptures) {\n  bookMapForHebrewScriptures[book.title] = book;\n}\n\n", " chapters: number;\n}\n\nexport const getHebrewScripturesBooks = (): HebrewBooks => {\n  return hebrewScriptures;\n};\n\nexport const getNewTestamentBooks =", " from '@core/types';\n\nexport const getChaptersFromParam = (\n  bookTitle: BookTitle,\n  param: string,\n): number[] => {\n  if (typeof param !== 'string') {\n", "_8_8',\n  '1_kings_20_1',\n  '1_kings_20_2',\n  '1_kings_20_3',\n  '1_k", " => {\n  const result =\n    (await fetch(\n      'https://www.biblegateway.com/passage/?search=' +\n        `${book}:${chapter}:${verse}` +\n        '&", ".github.com/gera2ld/bible-typescript/blob/master/src/constants/books.ts\n\nexport type BookTitle = string;\n\nconst booksToChaptersMap: { [name", "\n    return `${bookNumber}:${chapterNumber}`;\n  }\n\n  return `error`;\n};\n\nexport const getVersesFromSlug = (slug: string): string[] => {\n  if (", "?: boolean;\n}\n\nexport const getTitles = (\n  book: string | number,\n  chapter?: string | number,\n): {\n  bookTitle: string;\n  chapterTitle: string;\n}", "\n// The 'lectionary' is the interface between the client and the\n// book data. This keeps the book data immutable and single source\n// of truth\n\n// This file is not an export file. It is just to be"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}