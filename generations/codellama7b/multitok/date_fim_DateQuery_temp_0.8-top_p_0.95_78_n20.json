{"content": ["DateQuery {\n\tfunction empty(): EmptyDateQuery {\n\t\treturn {\n\t\t\tdateType: 'empty'\n\t\t}\n\t}\n\tfunction invalid(): InvalidDateQuery {\n\t\tlet message=`", "DateQuery {\n  ", "DateQuery {\n\tconst empty=(): EmptyDateQuery => ({\n\t\tdateType: 'empty'\n\t})\n\tconst invalid=(): InvalidDateQuery => ({\n\t\tdateType: 'invalid',\n\t\t", "DateQuery {\n\tconst invalid=(): InvalidDateQuery => {\n\t\treturn {\n\t\t\tdateType: 'invalid',\n\t\t\tmessage: `invalid date string: ${readableDate}`\n\t\t}\n", "DateQuery {\n\tfunction invalid(): InvalidDateQuery {\n\t\treturn {\n\t\t\tdateType: 'invalid',\n\t\t\tmessage:`invalid date string: ${readableDate}`\n\t\t}\n\t}\n", "DateQuery {\n\tlet m=''\n\tlet r=''\n\t{\n\t\tconst match=readableDate.trim().match(/^((\\d\\d\\d\\d)-?)(.*)/)\n\t\t", "DateQuery {\n\tif (readableDate=='') return empty()\n\tlet s=readableDate.trim()\n\tlet r=''\n\t{\n\t\tconst match=s.match(/^((\\d\\", "DateQuery {\n\treturn toDateQuery2(readableDate)\n}\n\nexport function toDateQuery2(readableDate: string): DateQuery {\n", "DateQuery {\n\treturn dateStringToDateQuery(readableDate)\n}\n\nexport function dateStringToDateQuery(readableDate: string): DateQuery {\n\treadableDate=readableDate.trim()\n", "DateQuery {\n\tif (readableDate=='') return empty()\n\treturn toDateQueryExact(readableDate)\n}\n\nexport function toDateQueryExact(readableDate: string): DateQuery {", "DateQuery {\n\tif (readableDate=='') return empty()\n\tif (readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)(T.*)?$", "DateQuery {\n\tif (!readableDate) return empty()\n\tif (/^(\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)T?(\\d\\d):?(\\d", "DateQuery {\n\treturn toDateQueryT(readableDate)\n}\n\nexport function toUrlDateQuery(readableDate: string): DateQuery {\n\treturn toDateQueryT(readableDate)\n}\n", "DateQuery {\n\tfunction toNumber(n: string): number {\n\t\tconst number=parseInt(n)\n\t\tif (isNaN(number)) throw new Error('invalid number')\n\t\treturn number\n\t}", "DateQuery {\n\tif (readableDate=='') return empty()\n\tif (readableDate=='-') return empty()\n\tif (readableDate.endsWith('T')) return invalid()\n\tif (read", "DateQuery {\n\tif (readableDate=='') return empty()\n\tlet parsedDate: number\n\ttry {\n\t\tparsedDate=Date.parse(readableDate)/1000\n\t}\n", "DateQuery {\n\tfunction isValid(c: string): boolean {\n\t\treturn c=='-' || c==' ' || c==':' || c=='T' || c=='Z'\n\t}\n\tfunction", "DateQuery {\n\treturn toDateQueryWithParsing(readableDate)\n\tfunction toDateQueryWithParsing(readableDate: string): DateQuery {\n\t\tlet result: DateQuery\n\t\ttry", "DateQuery {\n\tconst o=readableDate.trim()\n\tif (o=='') return {\n\t\tdateType: 'empty'\n\t}\n\tif (o.match(/^(\\d\\d\\", "DateQuery {\n\t//\n\t// This function is intended to be fast,\n\t// so it does not use regexp.\n\t//\n\t// It uses series of if-else statements,\n\t// with the long if"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}