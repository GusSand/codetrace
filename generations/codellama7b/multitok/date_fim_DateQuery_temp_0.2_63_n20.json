{"content": ["DateQuery {\n\tif (readableDate=='') return empty()\n\tif (readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\", "DateQuery {\n\tif (readableDate=='') return empty()\n\tif (readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d", "DateQuery {\n\tif (readableDate=='') return empty()\n\tif (readableDate.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0", "DateQuery {\n\tif (readableDate=='') return empty()\n\tif (readableDate.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0", "DateQuery {\n\t// 2000-01-01 00:00:00Z\n\t// 2000-01-01T00:00:00", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^(\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)T", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^(\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)(?:", "DateQuery {\n\tfunction empty(): EmptyDateQuery {\n\t\treturn {\n\t\t\tdateType: 'empty'\n\t\t}\n\t}\n\tfunction invalid(): InvalidDateQuery {\n\t\tlet message=`", "DateQuery {\n\tfunction empty(): EmptyDateQuery {\n\t\treturn {\n\t\t\tdateType: 'empty'\n\t\t}\n\t}\n\tfunction invalid(): InvalidDateQuery {\n\t\tlet message=`", "DateQuery {\n\tif (readableDate=='') return empty()\n\tlet s=readableDate.trim()\n\tlet m=''\n\tlet r=''\n\t{\n\t\tif (s=='", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d) (\\d\\", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^((\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)T", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^((\\d\\d\\d\\d)-?)(.*)/)\n\tif (!match) return invalid", "DateQuery {\n\tif (readableDate=='') return empty()\n\tconst match=readableDate.match(/^((\\d\\d\\d\\d)-?)(.*)/)\n\tif (!match) return invalid", "DateQuery {\n\tif (readableDate=='') return empty()\n\tlet s=readableDate.trim()\n\tlet m=''\n\t{\n\t\tif (s=='') return empty()\n\t", "DateQuery {\n\tif (readableDate=='') return empty()\n\tif (readableDate.length==10 && readableDate.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}