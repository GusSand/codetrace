{"content": ["Promise<any> {\n      ", "Promise<void> {\n      ", "Promise<any>\n  ", "Promise<boolean> {\n        throw Error(\n            `NotImplementedError: ${this.name}.initialize() has not been implemented.`\n        );\n    }\n\n    /**\n     * Get balances from exchange", "Promise<BaseConnection> {\n        throw Error(\n            `NotImplementedError: ${this.name}.initialize() has not been implemented.`\n        );\n    }\n\n    /**\n     * Initialize exchange by fetch", "Promise<boolean> {\n        throw Error(\n            `NotImplementedError: ${this.name}.initialize() has not been implemented.`\n        );\n    }\n\n    /**\n     * Returns a list of bal", "Promise<void> {\n        throw Error(\n            `NotImplementedError: ${this.name}.initialize() has not been implemented.`\n        );\n    }\n\n    /**\n     * Disconnect exchange by closing", "Promise<any> {\n        return new Promise((resolve, reject) => {\n            this._initialize((error, result) => {\n                if (error) {\n                    reject(error);\n                } else {\n", "Promise<Array<any>>\n    {\n        throw Error(\n            `NotImplementedError: ${this.name}.initialize() has not been implemented.`\n        );\n    }\n\n    /**\n     * S", "Promise<void> {\n        return new Promise((resolve, reject) => {\n            this._initialize()\n                .then((data) => {\n                    this.initialized = true;\n                    return resolve(data", "Promise<void> {\n        throw Error(\n            `NotImplementedError: ${this.name}.initialize() has not been implemented.`\n        );\n    }\n\n    /**\n     * Get accounts balance\n    ", "Promise<any> {\n        throw Error(\n            `NotImplementedError: ${this.name}.initialize() has not been implemented.`\n        );\n    }\n\n    /**\n     * Get connected exchange object\n", "Promise<any>\n    /**\n     * Initialize exchange by fetching balances and loading markets\n     * @param {Object} credentials Exchange credentials\n     */\n    initialize(credentials: any): Promise<any> {", "Promise<any> {\n        this.initialized = true;\n        return new Promise((resolve, reject) => {\n            this._initialize((err, res) => {\n                if (err) {\n                    this", "Promise<boolean> {\n        return new Promise(async (resolve, reject) => {\n            if (this.connection) {\n                if (this.requireSymbols && !this.symbols.length) {\n                ", "Promise<Array<any>> {\n        return new Promise(async (resolve, reject) => {\n            if (this.connection) {\n                try {\n                    if (this.connection.initialize) {\n                       ", "Promise<void> {\n        return new Promise<void>(async (resolve, reject) => {\n            if (this.initialized) {\n                resolve();\n                return;\n            }\n            await this._initConnection", "Promise<BaseConnection> {\n        return this._initialize();\n    }\n\n    /**\n     * Get balances for currencies\n     */\n    async getBalances(currencies: Array<string> = []):", "Promise<BaseConnection> {\n        return new Promise((resolve, reject) => {\n            this.connection\n                .getBalances()\n                .then(\n                    (result: Array<any>) => {\n                ", "Promise<void> {\n        return new Promise(async (resolve, reject) => {\n            // Try to load all balances\n            try {\n                this.balances = await this._initializeBalances();\n            }"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}