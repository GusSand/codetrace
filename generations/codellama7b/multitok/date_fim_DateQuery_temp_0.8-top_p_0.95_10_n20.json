{"content": ["DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery", "DateQuery {\n\tfunction invalid(): InvalidDateQuery {\n\t\tlet message=`invalid date string`\n\t\tif (m!='') message+=` after ${m}`\n\t\treturn {\n\t\t\tdateType:", "DateQuery {\n\tconst invalid=(): InvalidDateQuery => {\n\t\tlet message=`invalid date string`\n\t\tif (m!='') message+=` after ${m}`\n\t\treturn {\n\t\t\tdate", "DateQuery {\n\tconst match=readableDate.match(/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/)\n\tif (match) {\n\t\tconst year=parseInt(", "DateQuery {\n\tconst x=toDateQueryEx(readableDate)\n\tif (x.dateType=='invalid') x.message+=` for ${readableDate}`\n\treturn x\n}\n\nexport function", "DateQuery {\n\tconst dateMatch=readableDate.match(/^(\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)(?:\\s+)?(\\d\\d):?(\\d", "DateQuery {\n\tconst match=readableDate.match(/^(\\d{4}-\\d{2}-\\d{2}|\\d{8}T\\d{6})Z?$/)\n\tif (match) return"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}