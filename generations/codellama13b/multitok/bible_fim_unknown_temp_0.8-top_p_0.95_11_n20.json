{"content": ["  '1 Samuel',\n  '2 Samuel',\n  '1 Kings',\n  '2 Kings',\n  '1 Chronicles',\n  '2 Chronicles',\n  Ezra,\n  Nehemiah,\n ", " 1,\n  '2 Samuel': 1,\n  '1 Kings': 1,\n  '2 Kings': 1,\n  '1 Chronicles': 1,\n  '2 Chronicles': 1,", " 14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  20,\n  21,\n  22,\n  23,\n", " 12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  20,\n  21,\n", " 'Genesis',\n    'Exodus',\n    'Leviticus',\n    'Numbers',\n    'Deuteronomy',\n    'Joshua',\n    'Judges',\n    'Ruth", " 12,\n  Genesis: 50,\n  Exodus: 40,\n  Leviticus: 27,\n  Numbers: 36,\n  Deuteronomy: 3", " Genesis,\n  Exodus,\n  Leviticus,\n  Numbers,\n  Deuteronomy,\n  Joshua,\n  Judges,\n  Ruth,\n  '1 Samuel',\n  '2", " 10,\n  Philemon: 1,\n  Hebrews: 13,\n  James: 5,\n  '1 Peter': 5,\n  '2 Peter': 3,\n ", ": BookTitle = '2 Chronicles';\nexport const EZRA: BookTitle = 'Ezra';\nexport const NEHEMIAH: BookTitle = 'Nehemiah';\nexport const ESTHER: BookTitle", "\n  Jeremiah: 'Jeremia',\n  Lamentations: 'Pla\u010dy',\n  Ezekial: 'Ezechiel',\n  Daniel: 'Daniel',\n  Hosea: 'Oze", "  // prettier-ignore\nexport type BookParam = \n  | 'Genesis'\n  | 'Exodus'\n  | 'Leviticus'\n  | 'Numbers'\n  | 'Deuter", "Title[] = hebrewScriptures.map((x) => x.title);\nexport const newTestamentBookTitles: BookTitle[] = newTestament.map(\n  (x) => x.title,\n", " title: 'Obadiah' },\n  { id: 40, title: 'Philemon' },\n  { id: 41, title: 'Jude' },\n  { id: 42,", "export type BibleReference = {\n  book: string;\n  chapter: number;\n  verse: number;\n  verseRange?: [number, number];\n};\n\nexport type BibleReferenceWithChapter = {\n  book", "\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const book = books.find((x) => x.title === name);\n    if (book) {", "): boolean {\n  return typeof x === 'number';\n}\n\nexport function isString(x: unknown): boolean {\n  return typeof x === 'string';\n}\n\nexport const isPositiveInteger = (x:", "BookInfo;\n  endBook: BookInfo;\n  startChapter: number;\n  endChapter: number;\n}\n\nexport const getBookChapterData = (book: string, chapter: number) => {", " const books = [\n  {\n    bookName: 'Genesis',\n    bookId: 1,\n    short: 'Gen',\n    chapters: 50,\n    chapterLabel: 'Chapter',\n", "q-faith.org/bible/book/esther\n\n  Ezra: 10\n  Nehemiah: 13\n  Esther: 10\n  Job: 42\n  Ps", "ia and Heresy',\n  'St. Paul the Apostle and the Church',\n  'Asking for God\u2019s Will',\n  'Doctrine',\n  'Prayer',\n  'Spiritual"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}