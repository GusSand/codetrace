{"content": [" 'u16',\n  U32 = 'u32',\n  U64 = 'u64',\n  Bool = 'bool',\n  Address = 'address',\n  B256 = 'b", "Name(rawName: string): string;\n\nexport function parseSvmType(rawType: string, components?:  <SUF>, name?: string): SvmType;\n\nexport function parseSvmType(rawType: string,", "\n      case 'b256':\n        return { type: 'bytes', size: 32 };\n      case 'byte':\n        return { type: 'bytes', size: 1 };\n      case 'bool':", ",\n  B256Type,\n  ByteType,\n  StringType,\n  TupleType,\n  UnknownType,\n  VoidType,\n  AddressType,\n  SvmSymbol,\n  normal", "2[3-5][0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]", "\n  }\n  if (t.type === 'array' && other.type === 'array') {\n    return t.itemType === other.itemType && t.size === other.size;\n  }\n  if", ";\n  /**\n   * ABI name of the function\n   */\n  name: string;\n  /**\n   * The json signature of the function\n   */\n  signature: string;\n  /**\n   * The", " {\n      value: address,\n      type: 'address',\n    };\n  }\n\n  return {\n    value: address,\n    type: 'string',\n  };\n}\n\nexport function parseAddress(", "\n  /**\n   * Returns the type as a string\n   */\n  asString(): string;\n}\n\nexport class SvmTypeBoolean implements SvmType {\n  readonly type: SvmType = { type: '", "  components: SvmSymbol[];\n};\n\nexport interface SmartContractABI {\n  name: string;\n  constructor: SvmConstructor;\n  methods: SvmFunction[];\n  stateVariables: S", "\n        if (currentDepth === 0) {\n          return {\n            type: 'unknown',\n            originalType: token,\n          };\n        }\n\n        break;\n      }\n      case ')':\n", "\n * Example:\n *  - `struct Foo { a: u8, b: u16 }`  --> Foo\n *  - `struct Foo { a: u8, b: u16 }`  --> Foo\n *", ",\n  parseInputTypes,\n  parseOutputTypes,\n} from './parseFunction';\nimport { parseTupleStruct } from './parseStruct';\n\nexport interface ABI {\n  functions: Function[];\n  struct", "\n  // REF: https://stackoverflow.com/questions/6965107/converting-between-hex-decimal-and-base-64\n  function toBase64(hexString:", "(arg.name, arg.type),\n  );\n}\n\n/**\n * Represents the TypeScript code for a function.\n */\nexport interface SvmFunction {\n  name: string;\n  returnType:", "\n\nexport declare type TypeByName = { [key: string]: string };\n\nexport declare type ValueByName = { [key: string]: string | number | boolean };\n\nexport declare type ValueByNameWithComponent = {", "./utils';\nimport { Type } from '@polkadot/types/metadata/decorate';\nimport { Class } from './types';\n\nexport function parseToClass(abi: Array<{ name: string; type:", " } from 'svm-typescript-types';\n * \n * // The user types the types in the code editor\n * const types = [\n *   {\n *     name: 'Test',\n *     type: '", "';\n *\n * const method = contract.getMethod('approve');\n *\n * const approveParams = [\n *   // This is the owner\n *   // It's the address of the user who wants to appro", "\n   * @param {boolean} [args.typeDefinition=true] When true, returns a Class constructor\n   * @param {boolean} [args.typeInterface=false] When true, returns a class interface\n   * @"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}