{"content": ["\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n", "\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n", "\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n", "\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n", "\n * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except", "\n * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except", "\n * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except", "\n * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except", "\n * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except", "\n * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except", "\n * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except", "\n\n// To parse this data:\n//\n//   import { Convert, GrypeCvss } from \"./file\";\n//\n//   const grypeCvss = Convert.toGrypeCvss(json", "\n\n// To parse this data:\n//\n//   import { Convert, GrypeCvss } from \"./file\";\n//\n//   const grypeCvss = Convert.toGrypeCvss(json", "\n  //   const grypeCvss = Convert.toGrypeCvss(json);\n  //\n  // These functions will throw an error if the JSON doesn't\n  // match the expected interface, even if", "\n//\n//   const grypeCvss = Convert.toGrypeCvss(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON", "\n//   const grypeCvss = Convert.toGrypeCvss(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid", "\n\n// Generated by [ts-to-lua](https://github.com/luke-zhang-04/ts-to-lua)\n// A TypeScript to Lua compiler\n// Compiler options:\n", "\n  //   const map: any = {};\n  //   typ.props.forEach((p: any) => (map[p.json] = { key: p.js, typ: p.typ }));\n  //", "\n  //   \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N\",\n  //", "\n  //   //   \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N\",\n  //  "], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}