{"content": [" * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except in", " *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n *", " the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific", ";\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toGrypeCvss(json: string): Grype", " Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toGrypeCvss(json: string): GrypeCvss[]", " any, key: any = ''): never {\n  if (key) {\n    throw Error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`", " 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org", "c) 2020 LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this", "\n  'string',\n  'number',\n  'boolean',\n  'integer',\n  'null',\n  'any',\n  'array',\n  'object',\n  'union',\n  'date',", ",\n  GrypeCvss,\n  Metrics,\n} from './file';\n\nexport const GrypeCvss = {\n  toJSON(message: GrypeCvss): unknown {\n    const obj", " {\n  const isPrimitive =\n    typ === null ||\n    typeof typ === 'string' ||\n    typ === Boolean ||\n    typ === Number ||\n    typ === BigInt ||\n    typ === String ||\n   ", ",\n      props: [\n        { json: 'CVE', js: 'CVE', typ: '' },\n        { json: 'Package', js: 'Package', typ: '' },\n        { json: 'Vul", ", typ: 'any' },\n      { json: 'type', js: 'type', typ: 'any' },\n      { json: 'title', js: 'title', typ: 'any' },\n      { json:", " is the root type.\n//\n// Here is an example to get you started:\n//\n//  import { GrypeCvss } from \"./file\";\n//\n//  const grypeCvss = {\n", "\n    typ: 'any',\n  };\n  return {\n    type: 'array',\n    items: ref,\n  };\n}\n\nexport interface Override<T> {\n  type: T;\n ", "GrypeCvss> {\n    return new Promise((resolve, reject) => {\n      let text = '';\n      stream.on('data', (chunk) => (text += chunk));\n      stream.on('end',", "\n *\n * To parse values from Grype responses:\n *\n *   const grypeCvss = Convert.toGrypeCvss(json);\n *\n * To parse values from Grype responses using the `gr", " the terms of the Business Source License available at\n// https://www.business-source.com/bslms-license-us.html.\n\n// Code generated by go generate; DO NOT EDIT.\n// This file", "\nimport { r as __reader } from 'protobufjs/minimal';\nexport const protobufPackage = 'jolocom.relay';\n\nexport interface GrypeCvss {\n  /**\n   * arbitrary metadata", "-it'\n\nfunction processRequest(request: Request) {\n  return new Promise((resolve, reject) => {\n    const requestUrl = `${request.url}`\n    // use node-fetch to make HTTP request and"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}