{"content": [" * Copyright by LunaSec (owned by Refinery Labs, Inc)\n *\n * Licensed under the Business Source License v1.1\n * (the \"License\"); you may not use this file except in", " the License at\n *\n * https://github.com/lunasec-io/lunasec/blob/master/licenses/BSL-LunaTrace.txt\n *\n * See the License for the specific", " function uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ", " * Copyright 2019 Cloudflare, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file", " cvss.Metrics.BaseScore || 0,\n        ExploitabilityScore: cvss.Metrics.ExploitabilityScore || 0,\n        ImpactScore: cvss.Metrics.ImpactScore", "\n * https://github.com/gcanti/io-ts\n */\nimport { Error } from 'io-ts';\nimport { PathReporter } from 'io-ts/lib/PathReporter';\n\nimport {", "?\n//\n// @ts-nocheck\n\n/* eslint-disable */\n\n/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 3.19.", " a JSON parser for the Schema for this data structure\n//\n// To parse this data:\n//\n//   const parser = new Schema();\n//   const grypeCvss = parser.parse(json);\n//", " 'metascraper-amazon',\n  'metascraper-author',\n  'metascraper-base',\n  'metascraper-date',\n  'metascraper-description',\n ", "\n/**\n * Grype Cvss\n */\nexport interface GrypeCvss {\n  /**\n   * Additional vendor metadata\n   */\n  VendorMetadata?: any;\n  /**\n   * Metrics\n", " and asserts the results of JSON.parse at runtime\n *\n * @format\n */\n\n/**\n * A set of functions that can parse JSON objects and typecheck/validate them at runtime.\n * These functions are generated from", " an object of type 'GrypeCvss'\n *   - The data is a JSON object (e.g. {\"key\":\"value\"})\n *   - The data is a YAML object (e.g. key:", "\n//\n// In addition, we make use of these top-level definitions:\n//\n//   type = string\n//   any = any\n//\n// ----------------------------------------------------------------------\n\n// Based on the Minimal Sch", "\n//   - All of the above values must be present and must have valid values.\n//\n//   - If any of the above are missing or invalid, it is a parse error.  The\n//     set of missing keys is", " const defs = {};\n  for (const key in j) {\n    defs[key] = j[key];\n  }\n  return defs;\n}\n\nconst [{ get, post }] = [\n", "export type {\n  GrypeCvss,\n  Metrics,\n} from './io_lunasec_lunasec_gradius_gateway_v1_types_grype_types';\n\n", "json-model';\n\n/**\n * This file was generated by https://github.com/keybase/json-parser.\n * A map that can lookup a schema by it's ref\n */\nconst typeMap: any =", " default function addRef(map: { [name: string]: any }, name: string) {\n  map[name] = { ref: name };\n  return map;\n}\n\nconst typeMap: any = {};\n\n", "\n  typ: 'string';\n};\nexport type Any = any;\nexport type _Package_2 = any;\nexport type __Type_0 = {\n  typ: 'enumeration';\n  name: '__", ".6\n *\n * @public\n */\nexport declare function mapError<T, U extends Error>(\n  value: T | PromiseLike<T> | IterableIterator<T>,\n  onRejected: (reason"], "sampling_params": "{'greedy': SamplingParams(n=1, best_of=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.2': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.2, top_p=1.0, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True), 'temp_0.8-top_p_0.95': SamplingParams(n=20, best_of=20, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.8, top_p=0.95, top_k=-1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=50, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)}"}