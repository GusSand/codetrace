{
    "0": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_1 {",
        "gold": "_uniq_0",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_8: _uniq_1, _uniq_9: <FILL>): _uniq_1 {\n  switch (_uniq_8.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor5\", f0: _uniq_9, f1: { kind: \"Ctor4\" } };\n    }\n    case \"Ctor5\": {\n      let _uniq_11 = _uniq_8.f1;\n      let _uniq_10 = _uniq_8.f0;\n      return { kind: \"Ctor5\", f0: _uniq_10, f1: _uniq_6(_uniq_11, _uniq_9) };\n    }\n  }\n}\n\nfunction _uniq_7(_uniq_12: _uniq_1): _uniq_1 {\n  switch (_uniq_12.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor4\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_14 = _uniq_12.f1;\n      let _uniq_13 = _uniq_12.f0;\n      return _uniq_6(_uniq_7(_uniq_14), _uniq_13);\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_7({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_7({ kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nvalidations();\n"
    },
    "1": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_1 |",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\" };\ntype _uniq_1 =\n  | { kind: \"Ctor5\" }\n  | { kind: \"Ctor6\"; f0: _uniq_1; f1: _uniq_0; f2: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\"; f0: _uniq_2 };\n\nfunction _uniq_9(_uniq_11: <FILL>): (_uniq_12: _uniq_2) => _uniq_2 {\n  return function (_uniq_12: _uniq_2) {\n    switch (_uniq_11.kind) {\n      case \"Ctor7\": {\n        return _uniq_12;\n      }\n      case \"Ctor8\": {\n        let _uniq_13 = _uniq_11.f0;\n        return { kind: \"Ctor8\", f0: _uniq_9(_uniq_13)(_uniq_12) };\n      }\n    }\n  };\n}\n\nfunction _uniq_10(_uniq_14: _uniq_1): _uniq_2 {\n  switch (_uniq_14.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } };\n    }\n    case \"Ctor6\": {\n      let _uniq_17 = _uniq_14.f2;\n      let _uniq_16 = _uniq_14.f1;\n      let _uniq_15 = _uniq_14.f0;\n      return _uniq_9(_uniq_10(_uniq_15))(_uniq_10(_uniq_17));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_10({ kind: \"Ctor5\" }), {\n    kind: \"Ctor8\",\n    f0: { kind: \"Ctor7\" },\n  });\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor5\" },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: { kind: \"Ctor5\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor5\" },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor5\" },\n      f1: { kind: \"Ctor3\" },\n      f2: { kind: \"Ctor5\" },\n    }),\n    { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor5\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor5\" },\n        },\n        f1: { kind: \"Ctor4\" },\n        f2: { kind: \"Ctor5\" },\n      },\n      f1: { kind: \"Ctor4\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor4\" },\n        f2: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor5\" },\n          f1: { kind: \"Ctor4\" },\n          f2: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor5\" },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor4\" },\n        f2: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } },\n    }\n  );\n}\nvalidations();\n"
    },
    "2": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_11",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\" } | { kind: \"Ctor9\" };\n\nfunction _uniq_10(_uniq_12: _uniq_0, _uniq_13: _uniq_0): <FILL> {\n  switch (_uniq_12.kind) {\n    case \"Ctor3\": {\n      switch (_uniq_13.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor8\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_14 = _uniq_13.f0;\n          return { kind: \"Ctor7\" };\n        }\n      }\n    }\n    case \"Ctor4\": {\n      let _uniq_15 = _uniq_12.f0;\n      switch (_uniq_13.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor9\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_16 = _uniq_13.f0;\n          return _uniq_10(_uniq_15, _uniq_16);\n        }\n      }\n    }\n  }\n}\n\nfunction _uniq_11(_uniq_17: _uniq_1, _uniq_18: _uniq_0): _uniq_1 {\n  switch (_uniq_17.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor6\", f0: _uniq_18, f1: { kind: \"Ctor5\" } };\n    }\n    case \"Ctor6\": {\n      let _uniq_20 = _uniq_17.f1;\n      let _uniq_19 = _uniq_17.f0;\n      switch (_uniq_10(_uniq_18, _uniq_19).kind) {\n        case \"Ctor7\": {\n          return {\n            kind: \"Ctor6\",\n            f0: _uniq_18,\n            f1: { kind: \"Ctor6\", f0: _uniq_19, f1: _uniq_20 },\n          };\n        }\n        case \"Ctor8\": {\n          return _uniq_17;\n        }\n        case \"Ctor9\": {\n          return {\n            kind: \"Ctor6\",\n            f0: _uniq_19,\n            f1: _uniq_11(_uniq_20, _uniq_18),\n          };\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_11({ kind: \"Ctor5\" }, { kind: \"Ctor3\" }), {\n    kind: \"Ctor6\",\n    f0: { kind: \"Ctor3\" },\n    f1: { kind: \"Ctor5\" },\n  });\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n      { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n      { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n      { kind: \"Ctor3\" }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n      { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n      { kind: \"Ctor3\" }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n      { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor5\" },\n      },\n      { kind: \"Ctor3\" }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor5\" },\n      },\n      {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor5\" },\n      },\n      {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n      { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n    ),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "3": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_6({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_8: <FILL>): (_uniq_9: _uniq_1) => _uniq_1 {\n  return function (_uniq_9: _uniq_1) {\n    switch (_uniq_8.kind) {\n      case \"Ctor4\": {\n        return _uniq_9;\n      }\n      case \"Ctor5\": {\n        let _uniq_11 = _uniq_8.f1;\n        let _uniq_10 = _uniq_8.f0;\n        return { kind: \"Ctor5\", f0: _uniq_10, f1: _uniq_6(_uniq_11)(_uniq_9) };\n      }\n    }\n  };\n}\n\nfunction _uniq_7(_uniq_12: _uniq_1): _uniq_1 {\n  switch (_uniq_12.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor4\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_14 = _uniq_12.f1;\n      let _uniq_13 = _uniq_12.f0;\n      return _uniq_6(_uniq_7(_uniq_14))({\n        kind: \"Ctor5\",\n        f0: _uniq_13,\n        f1: { kind: \"Ctor4\" },\n      });\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_7({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_7({ kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: {\n                  kind: \"Ctor3\",\n                  f0: {\n                    kind: \"Ctor3\",\n                    f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n                  },\n                },\n              },\n            },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "4": {
        "old": "nat",
        "new": "<fim_middle>nat<|endoftext|><fim_prefix><fim_suffix>t",
        "gold": "nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction list_rev_tailcall(rem: <FILL>, acc: nlist): nlist {\n  switch (rem.kind) {\n    case \"Nil\": {\n      return acc;\n    }\n    case \"Cons\": {\n      let xs = rem.f1;\n      let x = rem.f0;\n      return list_rev_tailcall(xs, { kind: \"Cons\", f0: x, f1: acc });\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(list_rev_tailcall({ kind: \"Nil\" }, { kind: \"Nil\" }), {\n    kind: \"Nil\",\n  });\n  assert.deepEqual(\n    list_rev_tailcall(\n      { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      { kind: \"Nil\" }\n    ),\n    { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    list_rev_tailcall(\n      {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n      { kind: \"Nil\" }\n    ),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_rev_tailcall(\n      {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      },\n      { kind: \"Nil\" }\n    ),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall(\n      {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        },\n      },\n      { kind: \"Nil\" }\n    ),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall(\n      {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"Z\" },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"Z\" } },\n            f1: {\n              kind: \"Cons\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n              f1: { kind: \"Nil\" },\n            },\n          },\n        },\n      },\n      { kind: \"Nil\" }\n    ),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall(\n      {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n      { kind: \"Nil\" }\n    ),\n    { kind: \"Cons\", f0: { kind: \"S\", f0: { kind: \"Z\" } }, f1: { kind: \"Nil\" } }\n  );\n}\nvalidations();\n"
    },
    "5": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_10",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\" };\ntype _uniq_1 =\n  | { kind: \"Ctor5\" }\n  | { kind: \"Ctor6\"; f0: _uniq_1; f1: _uniq_0; f2: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\"; f0: _uniq_0; f1: _uniq_2 };\n\nfunction _uniq_9(_uniq_11: _uniq_2, _uniq_12: _uniq_2): _uniq_2 {\n  switch (_uniq_11.kind) {\n    case \"Ctor7\": {\n      return _uniq_12;\n    }\n    case \"Ctor8\": {\n      let _uniq_14 = _uniq_11.f1;\n      let _uniq_13 = _uniq_11.f0;\n      return { kind: \"Ctor8\", f0: _uniq_13, f1: _uniq_9(_uniq_14, _uniq_12) };\n    }\n  }\n}\n\nfunction _uniq_10(_uniq_15: _uniq_1): <FILL> {\n  switch (_uniq_15.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor7\" };\n    }\n    case \"Ctor6\": {\n      let _uniq_18 = _uniq_15.f2;\n      let _uniq_17 = _uniq_15.f1;\n      let _uniq_16 = _uniq_15.f0;\n      switch (_uniq_16.kind) {\n        case \"Ctor5\": {\n          switch (_uniq_18.kind) {\n            case \"Ctor5\": {\n              return { kind: \"Ctor8\", f0: _uniq_17, f1: { kind: \"Ctor7\" } };\n            }\n            case \"Ctor6\": {\n              let _uniq_21 = _uniq_18.f2;\n              let _uniq_20 = _uniq_18.f1;\n              let _uniq_19 = _uniq_18.f0;\n              return { kind: \"Ctor8\", f0: _uniq_17, f1: _uniq_10(_uniq_18) };\n            }\n          }\n        }\n        case \"Ctor6\": {\n          let _uniq_24 = _uniq_16.f2;\n          let _uniq_23 = _uniq_16.f1;\n          let _uniq_22 = _uniq_16.f0;\n          switch (_uniq_18.kind) {\n            case \"Ctor5\": {\n              return _uniq_9(_uniq_10(_uniq_16), {\n                kind: \"Ctor8\",\n                f0: _uniq_17,\n                f1: { kind: \"Ctor7\" },\n              });\n            }\n            case \"Ctor6\": {\n              let _uniq_27 = _uniq_18.f2;\n              let _uniq_26 = _uniq_18.f1;\n              let _uniq_25 = _uniq_18.f0;\n              return _uniq_9(_uniq_10(_uniq_16), _uniq_10(_uniq_18));\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_10({ kind: \"Ctor5\" }), { kind: \"Ctor7\" });\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor5\" },\n      },\n      f1: { kind: \"Ctor4\" },\n      f2: { kind: \"Ctor5\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor3\" },\n      f1: { kind: \"Ctor8\", f0: { kind: \"Ctor4\" }, f1: { kind: \"Ctor7\" } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor5\" },\n      f1: { kind: \"Ctor4\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\" },\n      f1: { kind: \"Ctor8\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor7\" } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor5\" },\n      f1: { kind: \"Ctor4\" },\n      f2: { kind: \"Ctor5\" },\n    }),\n    { kind: \"Ctor8\", f0: { kind: \"Ctor4\" }, f1: { kind: \"Ctor7\" } }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor5\" },\n          f1: { kind: \"Ctor4\" },\n          f2: { kind: \"Ctor5\" },\n        },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor4\" },\n        f2: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor8\", f0: { kind: \"Ctor4\" }, f1: { kind: \"Ctor7\" } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor5\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor5\" },\n        },\n        f1: { kind: \"Ctor4\" },\n        f2: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor5\" },\n            f1: { kind: \"Ctor4\" },\n            f2: { kind: \"Ctor5\" },\n          },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor5\" },\n        },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor4\" },\n        f2: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor5\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor3\" },\n          f1: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor4\" },\n            f1: { kind: \"Ctor8\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor7\" } },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "6": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1 {",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): (_uniq_8: _uniq_0) => _uniq_1 {\n  return function (_uniq_8: _uniq_0) {\n    switch (_uniq_8.kind) {\n      case \"Ctor2\": {\n        return _uniq_7;\n      }\n      case \"Ctor3\": {\n        let _uniq_9 = _uniq_8.f0;\n        switch (_uniq_7.kind) {\n          case \"Ctor4\": {\n            return { kind: \"Ctor4\" };\n          }\n          case \"Ctor5\": {\n            let _uniq_11 = _uniq_7.f1;\n            let _uniq_10 = _uniq_7.f0;\n            return _uniq_6(_uniq_11)(_uniq_9);\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" })({ kind: \"Ctor2\" }), {\n    kind: \"Ctor4\",\n  });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    })({ kind: \"Ctor2\" }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor4\" }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }),\n    { kind: \"Ctor4\" }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }),\n    { kind: \"Ctor4\" }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nvalidations();\n"
    },
    "7": {
        "old": "nlist",
        "new": "<fim_middle>nat;\nfunction main",
        "gold": "(n nat) => nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\ntype cmp = { kind: \"LT\" } | { kind: \"EQ\" } | { kind: \"GT\" };\n\nfunction compare(n1: nat): (n2: nat) => cmp {\n  return function (n2: nat) {\n    switch (n1.kind) {\n      case \"Z\": {\n        switch (n2.kind) {\n          case \"Z\": {\n            return { kind: \"EQ\" };\n          }\n          case \"S\": {\n            let m = n2.f0;\n            return { kind: \"LT\" };\n          }\n        }\n      }\n      case \"S\": {\n        let m1 = n1.f0;\n        switch (n2.kind) {\n          case \"Z\": {\n            return { kind: \"GT\" };\n          }\n          case \"S\": {\n            let m2 = n2.f0;\n            return compare(m1)(m2);\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction list_sorted_insert(l: nlist): <FILL> {\n  return function (n: nat) {\n    switch (l.kind) {\n      case \"Nil\": {\n        return { kind: \"Cons\", f0: n, f1: { kind: \"Nil\" } };\n      }\n      case \"Cons\": {\n        let tl = l.f1;\n        let m = l.f0;\n        switch (compare(n)(m).kind) {\n          case \"LT\": {\n            return { kind: \"Cons\", f0: n, f1: { kind: \"Cons\", f0: m, f1: tl } };\n          }\n          case \"EQ\": {\n            return l;\n          }\n          case \"GT\": {\n            return { kind: \"Cons\", f0: m, f1: list_sorted_insert(tl)(n) };\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(list_sorted_insert({ kind: \"Nil\" })({ kind: \"Z\" }), {\n    kind: \"Cons\",\n    f0: { kind: \"Z\" },\n    f1: { kind: \"Nil\" },\n  });\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"S\", f0: { kind: \"Z\" } }),\n    { kind: \"Cons\", f0: { kind: \"S\", f0: { kind: \"Z\" } }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"Z\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"S\", f0: { kind: \"Z\" } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    })({ kind: \"Z\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"Z\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } } }),\n    {\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: { kind: \"Nil\" },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: { kind: \"Nil\" },\n    })({\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f1: { kind: \"Nil\" },\n      },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "8": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1<|endoftext|>",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): _uniq_1 {\n  switch (_uniq_7.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor4\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_9 = _uniq_7.f1;\n      let _uniq_8 = _uniq_7.f0;\n      return _uniq_9;\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n}\nvalidations();\n"
    },
    "9": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_18",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 =\n  | { kind: \"Ctor5\"; f0: _uniq_0 }\n  | { kind: \"Ctor6\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor7\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor8\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor9\"; f0: _uniq_1; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor10\" } | { kind: \"Ctor11\" } | { kind: \"Ctor12\" };\n\nfunction _uniq_13(_uniq_19: _uniq_0): (_uniq_20: _uniq_0) => _uniq_2 {\n  return function (_uniq_20: _uniq_0) {\n    switch (_uniq_19.kind) {\n      case \"Ctor3\": {\n        switch (_uniq_20.kind) {\n          case \"Ctor3\": {\n            return { kind: \"Ctor11\" };\n          }\n          case \"Ctor4\": {\n            let _uniq_21 = _uniq_20.f0;\n            return { kind: \"Ctor10\" };\n          }\n        }\n      }\n      case \"Ctor4\": {\n        let _uniq_22 = _uniq_19.f0;\n        switch (_uniq_20.kind) {\n          case \"Ctor3\": {\n            return { kind: \"Ctor12\" };\n          }\n          case \"Ctor4\": {\n            let _uniq_23 = _uniq_20.f0;\n            return _uniq_13(_uniq_22)(_uniq_23);\n          }\n        }\n      }\n    }\n  };\n}\nfunction _uniq_14(_uniq_24: _uniq_0): (_uniq_25: _uniq_0) => _uniq_0 {\n  return function (_uniq_25: _uniq_0) {\n    switch (_uniq_24.kind) {\n      case \"Ctor3\": {\n        return _uniq_25;\n      }\n      case \"Ctor4\": {\n        let _uniq_26 = _uniq_24.f0;\n        return { kind: \"Ctor4\", f0: _uniq_14(_uniq_26)(_uniq_25) };\n      }\n    }\n  };\n}\nfunction _uniq_15(_uniq_27: _uniq_0): (_uniq_28: _uniq_0) => _uniq_0 {\n  return function (_uniq_28: _uniq_0) {\n    switch (_uniq_27.kind) {\n      case \"Ctor3\": {\n        return { kind: \"Ctor3\" };\n      }\n      case \"Ctor4\": {\n        let _uniq_29 = _uniq_27.f0;\n        switch (_uniq_28.kind) {\n          case \"Ctor3\": {\n            return _uniq_27;\n          }\n          case \"Ctor4\": {\n            let _uniq_30 = _uniq_28.f0;\n            return _uniq_15(_uniq_29)(_uniq_30);\n          }\n        }\n      }\n    }\n  };\n}\nfunction _uniq_16(_uniq_31: _uniq_0): (_uniq_32: _uniq_0) => _uniq_0 {\n  return function (_uniq_32: _uniq_0) {\n    switch (_uniq_31.kind) {\n      case \"Ctor3\": {\n        return { kind: \"Ctor3\" };\n      }\n      case \"Ctor4\": {\n        let _uniq_33 = _uniq_31.f0;\n        return _uniq_14(_uniq_32)(_uniq_16(_uniq_33)(_uniq_32));\n      }\n    }\n  };\n}\nfunction _uniq_17(_uniq_34: _uniq_0): (_uniq_35: _uniq_0) => _uniq_0 {\n  return function (_uniq_35: _uniq_0) {\n    switch (_uniq_35.kind) {\n      case \"Ctor3\": {\n        return { kind: \"Ctor3\" };\n      }\n      case \"Ctor4\": {\n        let _uniq_36 = _uniq_35.f0;\n        switch (_uniq_34.kind) {\n          case \"Ctor3\": {\n            return { kind: \"Ctor3\" };\n          }\n          case \"Ctor4\": {\n            let _uniq_37 = _uniq_34.f0;\n            switch (_uniq_13(_uniq_34)(_uniq_35).kind) {\n              case \"Ctor10\": {\n                return { kind: \"Ctor3\" };\n              }\n              case \"Ctor11\": {\n                return { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } };\n              }\n              case \"Ctor12\": {\n                return {\n                  kind: \"Ctor4\",\n                  f0: _uniq_17(_uniq_15(_uniq_34)(_uniq_35))(_uniq_35),\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction _uniq_18(_uniq_38: <FILL>): _uniq_0 {\n  switch (_uniq_38.kind) {\n    case \"Ctor5\": {\n      let _uniq_39 = _uniq_38.f0;\n      return _uniq_39;\n    }\n    case \"Ctor6\": {\n      let _uniq_41 = _uniq_38.f1;\n      let _uniq_40 = _uniq_38.f0;\n      return _uniq_14(_uniq_18(_uniq_40))(_uniq_18(_uniq_41));\n    }\n    case \"Ctor8\": {\n      let _uniq_43 = _uniq_38.f1;\n      let _uniq_42 = _uniq_38.f0;\n      return _uniq_16(_uniq_18(_uniq_42))(_uniq_18(_uniq_43));\n    }\n    case \"Ctor7\": {\n      let _uniq_45 = _uniq_38.f1;\n      let _uniq_44 = _uniq_38.f0;\n      return _uniq_15(_uniq_18(_uniq_44))(_uniq_18(_uniq_45));\n    }\n    case \"Ctor9\": {\n      let _uniq_47 = _uniq_38.f1;\n      let _uniq_46 = _uniq_38.f0;\n      return _uniq_17(_uniq_18(_uniq_46))(_uniq_18(_uniq_47));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(\n    _uniq_18({ kind: \"Ctor5\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor7\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor7\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: {\n                        kind: \"Ctor4\",\n                        f0: {\n                          kind: \"Ctor4\",\n                          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n}\nvalidations();\n"
    },
    "10": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_6({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>, _uniq_8: _uniq_0): _uniq_0 {\n  switch (_uniq_7.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor2\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_10 = _uniq_7.f1;\n      let _uniq_9 = _uniq_7.f0;\n      switch (_uniq_8.kind) {\n        case \"Ctor2\": {\n          return _uniq_9;\n        }\n        case \"Ctor3\": {\n          let _uniq_11 = _uniq_8.f0;\n          return _uniq_6(_uniq_10, _uniq_11);\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }, { kind: \"Ctor2\" }), {\n    kind: \"Ctor2\",\n  });\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: { kind: \"Ctor4\" },\n      },\n      { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n    ),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n      { kind: \"Ctor2\" }\n    ),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n      { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n    ),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n      { kind: \"Ctor2\" }\n    ),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n      { kind: \"Ctor2\" }\n    ),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n            f1: {\n              kind: \"Ctor5\",\n              f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              f1: { kind: \"Ctor4\" },\n            },\n          },\n        },\n      },\n      { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n    ),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n      { kind: \"Ctor2\" }\n    ),\n    {\n      kind: \"Ctor3\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n      { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n    ),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n      { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n    ),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n      {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      }\n    ),\n    { kind: \"Ctor2\" }\n  );\n}\nvalidations();\n"
    },
    "11": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_10",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 =\n  | { kind: \"Ctor7\" }\n  | { kind: \"Ctor8\"; f0: _uniq_2; f1: _uniq_0; f2: _uniq_2 };\n\nfunction _uniq_9(_uniq_11: <FILL>): (_uniq_12: _uniq_1) => _uniq_1 {\n  return function (_uniq_12: _uniq_1) {\n    switch (_uniq_11.kind) {\n      case \"Ctor5\": {\n        return _uniq_12;\n      }\n      case \"Ctor6\": {\n        let _uniq_14 = _uniq_11.f1;\n        let _uniq_13 = _uniq_11.f0;\n        return { kind: \"Ctor6\", f0: _uniq_13, f1: _uniq_9(_uniq_14)(_uniq_12) };\n      }\n    }\n  };\n}\n\nfunction _uniq_10(_uniq_15: _uniq_2): _uniq_1 {\n  switch (_uniq_15.kind) {\n    case \"Ctor7\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor8\": {\n      let _uniq_18 = _uniq_15.f2;\n      let _uniq_17 = _uniq_15.f1;\n      let _uniq_16 = _uniq_15.f0;\n      let _uniq_19: _uniq_1 = _uniq_10(_uniq_16);\n      let _uniq_20: _uniq_1 = _uniq_10(_uniq_18);\n      let _uniq_21: _uniq_1 = _uniq_9(_uniq_19)(_uniq_20);\n      return _uniq_9(_uniq_21)({\n        kind: \"Ctor6\",\n        f0: _uniq_17,\n        f1: { kind: \"Ctor5\" },\n      });\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_10({ kind: \"Ctor7\" }), { kind: \"Ctor5\" });\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: { kind: \"Ctor7\" },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor3\" },\n          f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f2: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor3\" },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      f1: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f2: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                  },\n                },\n              },\n            },\n          },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                },\n              },\n            },\n            f1: {\n              kind: \"Ctor6\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: {\n                        kind: \"Ctor4\",\n                        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                      },\n                    },\n                  },\n                },\n              },\n              f1: {\n                kind: \"Ctor6\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: {\n                        kind: \"Ctor4\",\n                        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                      },\n                    },\n                  },\n                },\n                f1: {\n                  kind: \"Ctor6\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                    },\n                  },\n                  f1: { kind: \"Ctor5\" },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "12": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_11",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\" } | { kind: \"Ctor5\" };\ntype _uniq_1 = { kind: \"Ctor6\" } | { kind: \"Ctor7\"; f0: _uniq_1 };\ntype _uniq_2 =\n  | { kind: \"Ctor8\" }\n  | { kind: \"Ctor9\"; f0: _uniq_2; f1: _uniq_1; f2: _uniq_2 };\n\nfunction _uniq_10(_uniq_12: _uniq_1, _uniq_13: _uniq_1): _uniq_0 {\n  switch (_uniq_12.kind) {\n    case \"Ctor6\": {\n      switch (_uniq_13.kind) {\n        case \"Ctor6\": {\n          return { kind: \"Ctor3\" };\n        }\n        case \"Ctor7\": {\n          let _uniq_14 = _uniq_13.f0;\n          return { kind: \"Ctor5\" };\n        }\n      }\n    }\n    case \"Ctor7\": {\n      let _uniq_15 = _uniq_12.f0;\n      switch (_uniq_13.kind) {\n        case \"Ctor6\": {\n          return { kind: \"Ctor4\" };\n        }\n        case \"Ctor7\": {\n          let _uniq_16 = _uniq_13.f0;\n          return _uniq_10(_uniq_15, _uniq_16);\n        }\n      }\n    }\n  }\n}\n\nfunction _uniq_11(_uniq_17: <FILL>, _uniq_18: _uniq_1): _uniq_2 {\n  switch (_uniq_17.kind) {\n    case \"Ctor8\": {\n      return {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: _uniq_18,\n        f2: { kind: \"Ctor8\" },\n      };\n    }\n    case \"Ctor9\": {\n      let _uniq_21 = _uniq_17.f2;\n      let _uniq_20 = _uniq_17.f1;\n      let _uniq_19 = _uniq_17.f0;\n      switch (_uniq_10(_uniq_18, _uniq_20).kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor9\", f0: _uniq_19, f1: _uniq_20, f2: _uniq_21 };\n        }\n        case \"Ctor5\": {\n          return {\n            kind: \"Ctor9\",\n            f0: _uniq_11(_uniq_19, _uniq_18),\n            f1: _uniq_20,\n            f2: _uniq_21,\n          };\n        }\n        case \"Ctor4\": {\n          return {\n            kind: \"Ctor9\",\n            f0: _uniq_19,\n            f1: _uniq_20,\n            f2: _uniq_11(_uniq_21, _uniq_18),\n          };\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_11({ kind: \"Ctor8\" }, { kind: \"Ctor6\" }), {\n    kind: \"Ctor9\",\n    f0: { kind: \"Ctor8\" },\n    f1: { kind: \"Ctor6\" },\n    f2: { kind: \"Ctor8\" },\n  });\n  assert.deepEqual(\n    _uniq_11({ kind: \"Ctor8\" }, { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } }),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      { kind: \"Ctor8\" },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor6\" }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor6\" },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor6\" },\n      f2: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: { kind: \"Ctor8\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor6\" },\n      f2: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor6\" }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor6\" }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: { kind: \"Ctor8\" },\n      },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor8\" },\n        },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor6\" }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor8\" },\n        },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor8\" },\n        },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          f2: { kind: \"Ctor8\" },\n        },\n      },\n      { kind: \"Ctor6\" }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor8\" },\n      },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          f2: { kind: \"Ctor8\" },\n        },\n      },\n      { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n      f2: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor6\" },\n        f2: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n          f2: {\n            kind: \"Ctor9\",\n            f0: { kind: \"Ctor8\" },\n            f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n            f2: { kind: \"Ctor8\" },\n          },\n        },\n      },\n      {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor6\" },\n      f2: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n        f2: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          f2: {\n            kind: \"Ctor9\",\n            f0: { kind: \"Ctor8\" },\n            f1: {\n              kind: \"Ctor7\",\n              f0: {\n                kind: \"Ctor7\",\n                f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n              },\n            },\n            f2: { kind: \"Ctor8\" },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: {\n          kind: \"Ctor9\",\n          f0: {\n            kind: \"Ctor9\",\n            f0: { kind: \"Ctor8\" },\n            f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n            f2: { kind: \"Ctor8\" },\n          },\n          f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          f2: { kind: \"Ctor8\" },\n        },\n        f1: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        },\n        f2: { kind: \"Ctor8\" },\n      },\n      { kind: \"Ctor6\" }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: {\n          kind: \"Ctor9\",\n          f0: {\n            kind: \"Ctor9\",\n            f0: { kind: \"Ctor8\" },\n            f1: { kind: \"Ctor6\" },\n            f2: { kind: \"Ctor8\" },\n          },\n          f1: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n          f2: { kind: \"Ctor8\" },\n        },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: { kind: \"Ctor8\" },\n      },\n      f1: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      },\n      f2: { kind: \"Ctor8\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          f2: { kind: \"Ctor8\" },\n        },\n        f1: {\n          kind: \"Ctor7\",\n          f0: {\n            kind: \"Ctor7\",\n            f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          },\n        },\n        f2: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: {\n            kind: \"Ctor7\",\n            f0: {\n              kind: \"Ctor7\",\n              f0: {\n                kind: \"Ctor7\",\n                f0: {\n                  kind: \"Ctor7\",\n                  f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n                },\n              },\n            },\n          },\n          f2: { kind: \"Ctor8\" },\n        },\n      },\n      {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: {\n            kind: \"Ctor7\",\n            f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          },\n          f2: { kind: \"Ctor8\" },\n        },\n      },\n      f1: {\n        kind: \"Ctor7\",\n        f0: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        },\n      },\n      f2: {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: {\n          kind: \"Ctor7\",\n          f0: {\n            kind: \"Ctor7\",\n            f0: {\n              kind: \"Ctor7\",\n              f0: {\n                kind: \"Ctor7\",\n                f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n              },\n            },\n          },\n        },\n        f2: { kind: \"Ctor8\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      {\n        kind: \"Ctor9\",\n        f0: { kind: \"Ctor8\" },\n        f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n        f2: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: {\n            kind: \"Ctor7\",\n            f0: {\n              kind: \"Ctor7\",\n              f0: {\n                kind: \"Ctor7\",\n                f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } },\n              },\n            },\n          },\n          f2: { kind: \"Ctor8\" },\n        },\n      },\n      {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      }\n    ),\n    {\n      kind: \"Ctor9\",\n      f0: { kind: \"Ctor8\" },\n      f1: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n      f2: {\n        kind: \"Ctor9\",\n        f0: {\n          kind: \"Ctor9\",\n          f0: { kind: \"Ctor8\" },\n          f1: {\n            kind: \"Ctor7\",\n            f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          },\n          f2: { kind: \"Ctor8\" },\n        },\n        f1: {\n          kind: \"Ctor7\",\n          f0: {\n            kind: \"Ctor7\",\n            f0: { kind: \"Ctor7\", f0: { kind: \"Ctor7\", f0: { kind: \"Ctor6\" } } },\n          },\n        },\n        f2: { kind: \"Ctor8\" },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "13": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_9({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\"; f0: _uniq_0 };\n\nfunction _uniq_9(_uniq_10: <FILL>): _uniq_2 {\n  switch (_uniq_10.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor7\" };\n    }\n    case \"Ctor6\": {\n      let _uniq_12 = _uniq_10.f1;\n      let _uniq_11 = _uniq_10.f0;\n      switch (_uniq_12.kind) {\n        case \"Ctor5\": {\n          return { kind: \"Ctor8\", f0: _uniq_11 };\n        }\n        case \"Ctor6\": {\n          let _uniq_14 = _uniq_12.f1;\n          let _uniq_13 = _uniq_12.f0;\n          return _uniq_9(_uniq_12);\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_9({ kind: \"Ctor5\" }), { kind: \"Ctor7\" });\n  assert.deepEqual(\n    _uniq_9({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor5\" },\n    }),\n    { kind: \"Ctor8\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n  );\n  assert.deepEqual(\n    _uniq_9({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: { kind: \"Ctor5\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_9({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }),\n    { kind: \"Ctor8\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n  );\n  assert.deepEqual(\n    _uniq_9({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_9({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    { kind: \"Ctor8\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_9({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_9({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_9({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      },\n    }),\n    { kind: \"Ctor8\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n  );\n}\nvalidations();\n"
    },
    "14": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_6({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): (_uniq_8: _uniq_0) => _uniq_0 {\n  return function (_uniq_8: _uniq_0) {\n    switch (_uniq_7.kind) {\n      case \"Ctor4\": {\n        return { kind: \"Ctor2\" };\n      }\n      case \"Ctor5\": {\n        let _uniq_10 = _uniq_7.f1;\n        let _uniq_9 = _uniq_7.f0;\n        switch (_uniq_8.kind) {\n          case \"Ctor2\": {\n            return _uniq_9;\n          }\n          case \"Ctor3\": {\n            let _uniq_11 = _uniq_8.f0;\n            return _uniq_6(_uniq_10)(_uniq_11);\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" })({ kind: \"Ctor2\" }), {\n    kind: \"Ctor2\",\n  });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: { kind: \"Ctor4\" },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor2\" }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor2\" }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor2\" }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor2\" }),\n    {\n      kind: \"Ctor3\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n}\nvalidations();\n"
    },
    "15": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_18",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 =\n  | { kind: \"Ctor5\"; f0: _uniq_0 }\n  | { kind: \"Ctor6\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor7\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor8\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor9\"; f0: _uniq_1; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor10\" } | { kind: \"Ctor11\" } | { kind: \"Ctor12\" };\n\nfunction _uniq_13(_uniq_19: _uniq_0, _uniq_20: _uniq_0): <FILL> {\n  switch (_uniq_19.kind) {\n    case \"Ctor3\": {\n      switch (_uniq_20.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor11\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_21 = _uniq_20.f0;\n          return { kind: \"Ctor10\" };\n        }\n      }\n    }\n    case \"Ctor4\": {\n      let _uniq_22 = _uniq_19.f0;\n      switch (_uniq_20.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor12\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_23 = _uniq_20.f0;\n          return _uniq_13(_uniq_22, _uniq_23);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_14(_uniq_24: _uniq_0, _uniq_25: _uniq_0): _uniq_0 {\n  switch (_uniq_24.kind) {\n    case \"Ctor3\": {\n      return _uniq_25;\n    }\n    case \"Ctor4\": {\n      let _uniq_26 = _uniq_24.f0;\n      return { kind: \"Ctor4\", f0: _uniq_14(_uniq_26, _uniq_25) };\n    }\n  }\n}\nfunction _uniq_15(_uniq_27: _uniq_0, _uniq_28: _uniq_0): _uniq_0 {\n  switch (_uniq_27.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_29 = _uniq_27.f0;\n      switch (_uniq_28.kind) {\n        case \"Ctor3\": {\n          return _uniq_27;\n        }\n        case \"Ctor4\": {\n          let _uniq_30 = _uniq_28.f0;\n          return _uniq_15(_uniq_29, _uniq_30);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_16(_uniq_31: _uniq_0, _uniq_32: _uniq_0): _uniq_0 {\n  switch (_uniq_31.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_33 = _uniq_31.f0;\n      return _uniq_14(_uniq_32, _uniq_16(_uniq_33, _uniq_32));\n    }\n  }\n}\nfunction _uniq_17(_uniq_34: _uniq_0, _uniq_35: _uniq_0): _uniq_0 {\n  switch (_uniq_35.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_36 = _uniq_35.f0;\n      switch (_uniq_34.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor3\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_37 = _uniq_34.f0;\n          switch (_uniq_13(_uniq_34, _uniq_35).kind) {\n            case \"Ctor10\": {\n              return { kind: \"Ctor3\" };\n            }\n            case \"Ctor11\": {\n              return { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } };\n            }\n            case \"Ctor12\": {\n              return {\n                kind: \"Ctor4\",\n                f0: _uniq_17(_uniq_15(_uniq_34, _uniq_35), _uniq_35),\n              };\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction _uniq_18(_uniq_38: _uniq_1): _uniq_0 {\n  switch (_uniq_38.kind) {\n    case \"Ctor5\": {\n      let _uniq_39 = _uniq_38.f0;\n      return _uniq_39;\n    }\n    case \"Ctor6\": {\n      let _uniq_41 = _uniq_38.f1;\n      let _uniq_40 = _uniq_38.f0;\n      return _uniq_14(_uniq_18(_uniq_40), _uniq_18(_uniq_41));\n    }\n    case \"Ctor8\": {\n      let _uniq_43 = _uniq_38.f1;\n      let _uniq_42 = _uniq_38.f0;\n      return _uniq_16(_uniq_18(_uniq_42), _uniq_18(_uniq_43));\n    }\n    case \"Ctor7\": {\n      let _uniq_45 = _uniq_38.f1;\n      let _uniq_44 = _uniq_38.f0;\n      return _uniq_15(_uniq_18(_uniq_44), _uniq_18(_uniq_45));\n    }\n    case \"Ctor9\": {\n      let _uniq_47 = _uniq_38.f1;\n      let _uniq_46 = _uniq_38.f0;\n      return _uniq_17(_uniq_18(_uniq_46), _uniq_18(_uniq_47));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(\n    _uniq_18({ kind: \"Ctor5\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor7\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor7\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: {\n                        kind: \"Ctor4\",\n                        f0: {\n                          kind: \"Ctor4\",\n                          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n}\nvalidations();\n"
    },
    "16": {
        "old": "nat",
        "new": "<fim_middle>nat_max({ kind",
        "gold": "(n2 nat) => nat",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype cmp = { kind: \"LT\" } | { kind: \"EQ\" } | { kind: \"GT\" };\n\nfunction compare(n1: nat): (n2: nat) => cmp {\n  return function (n2: nat) {\n    switch (n1.kind) {\n      case \"Z\": {\n        switch (n2.kind) {\n          case \"Z\": {\n            return { kind: \"EQ\" };\n          }\n          case \"S\": {\n            let m = n2.f0;\n            return { kind: \"LT\" };\n          }\n        }\n      }\n      case \"S\": {\n        let m1 = n1.f0;\n        switch (n2.kind) {\n          case \"Z\": {\n            return { kind: \"GT\" };\n          }\n          case \"S\": {\n            let m2 = n2.f0;\n            return compare(m1)(m2);\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction nat_max(n1: nat): <FILL> {\n  return function (n2: nat) {\n    switch (n1.kind) {\n      case \"Z\": {\n        return n2;\n      }\n      case \"S\": {\n        let n3 = n1.f0;\n        switch (n2.kind) {\n          case \"Z\": {\n            return n1;\n          }\n          case \"S\": {\n            let n4 = n2.f0;\n            return { kind: \"S\", f0: nat_max(n3)(n4) };\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(nat_max({ kind: \"Z\" })({ kind: \"Z\" }), { kind: \"Z\" });\n  assert.deepEqual(nat_max({ kind: \"Z\" })({ kind: \"S\", f0: { kind: \"Z\" } }), {\n    kind: \"S\",\n    f0: { kind: \"Z\" },\n  });\n  assert.deepEqual(\n    nat_max({ kind: \"Z\" })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }\n  );\n  assert.deepEqual(nat_max({ kind: \"S\", f0: { kind: \"Z\" } })({ kind: \"Z\" }), {\n    kind: \"S\",\n    f0: { kind: \"Z\" },\n  });\n  assert.deepEqual(\n    nat_max({ kind: \"S\", f0: { kind: \"Z\" } })({ kind: \"S\", f0: { kind: \"Z\" } }),\n    { kind: \"S\", f0: { kind: \"Z\" } }\n  );\n  assert.deepEqual(\n    nat_max({ kind: \"S\", f0: { kind: \"Z\" } })({\n      kind: \"S\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }\n  );\n  assert.deepEqual(\n    nat_max({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } })({ kind: \"Z\" }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }\n  );\n  assert.deepEqual(\n    nat_max({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } })({\n      kind: \"S\",\n      f0: { kind: \"Z\" },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }\n  );\n  assert.deepEqual(\n    nat_max({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } })({\n      kind: \"S\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    nat_max({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } })({\n      kind: \"S\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } } }\n  );\n  assert.deepEqual(\n    nat_max({\n      kind: \"S\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } } }\n  );\n  assert.deepEqual(\n    nat_max({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } })({\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    nat_max({\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    })({ kind: \"Z\" }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "17": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_11",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 =\n  | { kind: \"Ctor7\" }\n  | { kind: \"Ctor8\"; f0: _uniq_2; f1: _uniq_0; f2: _uniq_2 };\n\nfunction _uniq_9(_uniq_12: _uniq_0): _uniq_0 {\n  switch (_uniq_12.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_13 = _uniq_12.f0;\n      switch (_uniq_13.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor3\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_14 = _uniq_13.f0;\n          return { kind: \"Ctor4\", f0: _uniq_9(_uniq_14) };\n        }\n      }\n    }\n  }\n}\nfunction _uniq_10(_uniq_15: _uniq_0): _uniq_0 {\n  return { kind: \"Ctor4\", f0: _uniq_15 };\n}\n\nfunction _uniq_11(\n  _uniq_16: (__x9: _uniq_0) => _uniq_0,\n  _uniq_17: <FILL>\n): _uniq_2 {\n  switch (_uniq_17.kind) {\n    case \"Ctor7\": {\n      return { kind: \"Ctor7\" };\n    }\n    case \"Ctor8\": {\n      let _uniq_20 = _uniq_17.f2;\n      let _uniq_19 = _uniq_17.f1;\n      let _uniq_18 = _uniq_17.f0;\n      return {\n        kind: \"Ctor8\",\n        f0: _uniq_11(_uniq_16, _uniq_18),\n        f1: _uniq_16(_uniq_19),\n        f2: _uniq_11(_uniq_16, _uniq_20),\n      };\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_11(_uniq_9, { kind: \"Ctor7\" }), { kind: \"Ctor7\" });\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: { kind: \"Ctor7\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: { kind: \"Ctor7\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_10, {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor3\" },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: { kind: \"Ctor7\" },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_11(_uniq_10, {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f2: { kind: \"Ctor7\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      function (_uniq_21: _uniq_0) {\n        switch (_uniq_21.kind) {\n          case \"Ctor3\": {\n            return { kind: \"Ctor3\" };\n          }\n          case \"Ctor4\": {\n            let _uniq_22 = _uniq_21.f0;\n            return _uniq_22;\n          }\n        }\n      },\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f2: { kind: \"Ctor7\" },\n          },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      function (_uniq_23: _uniq_0) {\n        return _uniq_23;\n      },\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f2: { kind: \"Ctor7\" },\n      }\n    ),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f2: { kind: \"Ctor7\" },\n    }\n  );\n}\nvalidations();\n"
    },
    "18": {
        "old": "nat",
        "new": "<fim_middle>nat<|endoftext|><fim_prefix><fim_suffix>t",
        "gold": "(n nat) => nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction fold(\n  l: nlist\n): (f: (__x8: nlist) => (__x9: nat) => nlist) => (acc: nlist) => nlist {\n  return function (f: (__x6: nlist) => (__x7: nat) => nlist) {\n    return function (acc: nlist) {\n      switch (l.kind) {\n        case \"Nil\": {\n          return acc;\n        }\n        case \"Cons\": {\n          let xs = l.f1;\n          let x = l.f0;\n          return fold(xs)(f)(f(acc)(x));\n        }\n      }\n    };\n  };\n}\nfunction snoc(l: nlist): <FILL> {\n  return function (n: nat) {\n    switch (l.kind) {\n      case \"Nil\": {\n        return { kind: \"Cons\", f0: n, f1: { kind: \"Nil\" } };\n      }\n      case \"Cons\": {\n        let xs = l.f1;\n        let x = l.f0;\n        return { kind: \"Cons\", f0: x, f1: snoc(xs)(n) };\n      }\n    }\n  };\n}\n\nfunction list_rev_fold(l: nlist): nlist {\n  return fold(l)(function (l: nlist) {\n    return function (n: nat) {\n      return { kind: \"Cons\", f0: n, f1: l };\n    };\n  })({ kind: \"Nil\" });\n}\n\nfunction assertions() {\n  assert.deepEqual(list_rev_fold({ kind: \"Nil\" }), { kind: \"Nil\" });\n  assert.deepEqual(\n    list_rev_fold({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_rev_fold({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_fold({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_fold({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_fold({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    }),\n    { kind: \"Cons\", f0: { kind: \"S\", f0: { kind: \"Z\" } }, f1: { kind: \"Nil\" } }\n  );\n}\nvalidations();\n"
    },
    "19": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_12",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\" };\ntype _uniq_1 =\n  | { kind: \"Ctor4\"; f0: _uniq_0 }\n  | { kind: \"Ctor5\"; f0: _uniq_1 }\n  | { kind: \"Ctor6\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor7\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor8\"; f0: _uniq_1; f1: _uniq_1 };\n\nfunction _uniq_9(_uniq_13: _uniq_0): _uniq_0 {\n  switch (_uniq_13.kind) {\n    case \"Ctor2\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor3\": {\n      return { kind: \"Ctor2\" };\n    }\n  }\n}\nfunction _uniq_10(_uniq_14: _uniq_0, _uniq_15: _uniq_0): _uniq_0 {\n  switch (_uniq_15.kind) {\n    case \"Ctor2\": {\n      return _uniq_14;\n    }\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n  }\n}\nfunction _uniq_11(_uniq_16: _uniq_0, _uniq_17: _uniq_0): _uniq_0 {\n  switch (_uniq_16.kind) {\n    case \"Ctor2\": {\n      return { kind: \"Ctor2\" };\n    }\n    case \"Ctor3\": {\n      return _uniq_17;\n    }\n  }\n}\n\nfunction _uniq_12(_uniq_18: <FILL>): _uniq_0 {\n  switch (_uniq_18.kind) {\n    case \"Ctor4\": {\n      let _uniq_19 = _uniq_18.f0;\n      return _uniq_19;\n    }\n    case \"Ctor5\": {\n      let _uniq_20 = _uniq_18.f0;\n      return _uniq_9(_uniq_12(_uniq_20));\n    }\n    case \"Ctor6\": {\n      let _uniq_22 = _uniq_18.f1;\n      let _uniq_21 = _uniq_18.f0;\n      return _uniq_10(_uniq_12(_uniq_21), _uniq_12(_uniq_22));\n    }\n    case \"Ctor7\": {\n      let _uniq_24 = _uniq_18.f1;\n      let _uniq_23 = _uniq_18.f0;\n      return _uniq_11(_uniq_12(_uniq_23), _uniq_12(_uniq_24));\n    }\n    case \"Ctor8\": {\n      let _uniq_26 = _uniq_18.f1;\n      let _uniq_25 = _uniq_18.f0;\n      return _uniq_11(_uniq_9(_uniq_12(_uniq_25)), _uniq_12(_uniq_26));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_12({ kind: \"Ctor4\", f0: { kind: \"Ctor2\" } }), {\n    kind: \"Ctor2\",\n  });\n  assert.deepEqual(_uniq_12({ kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }), {\n    kind: \"Ctor3\",\n  });\n  assert.deepEqual(\n    _uniq_12({ kind: \"Ctor5\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } } }),\n    { kind: \"Ctor3\" }\n  );\n  assert.deepEqual(\n    _uniq_12({ kind: \"Ctor5\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n    }),\n    { kind: \"Ctor3\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n    }),\n    { kind: \"Ctor3\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n    }),\n    { kind: \"Ctor3\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n    }),\n    { kind: \"Ctor3\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      },\n    }),\n    { kind: \"Ctor3\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      },\n      f1: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      },\n    }),\n    { kind: \"Ctor2\" }\n  );\n}\nvalidations();\n"
    },
    "20": {
        "old": "_uniq_3",
        "new": "<fim_middle>_uniq_15",
        "gold": "_uniq_0",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor6\" } | { kind: \"Ctor7\" };\ntype _uniq_2 = { kind: \"Ctor8\" } | { kind: \"Ctor9\" } | { kind: \"Ctor10\" };\ntype _uniq_3 =\n  | { kind: \"Ctor11\" }\n  | { kind: \"Ctor12\"; f0: _uniq_0; f1: _uniq_3; f2: _uniq_3 };\n\nfunction _uniq_13(_uniq_16: _uniq_0, _uniq_17: <FILL>): _uniq_2 {\n  switch (_uniq_16.kind) {\n    case \"Ctor4\": {\n      switch (_uniq_17.kind) {\n        case \"Ctor4\": {\n          return { kind: \"Ctor9\" };\n        }\n        case \"Ctor5\": {\n          let _uniq_18 = _uniq_17.f0;\n          return { kind: \"Ctor8\" };\n        }\n      }\n    }\n    case \"Ctor5\": {\n      let _uniq_19 = _uniq_16.f0;\n      switch (_uniq_17.kind) {\n        case \"Ctor4\": {\n          return { kind: \"Ctor10\" };\n        }\n        case \"Ctor5\": {\n          let _uniq_20 = _uniq_17.f0;\n          return _uniq_13(_uniq_19, _uniq_20);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_14(_uniq_21: _uniq_1, _uniq_22: _uniq_1): _uniq_1 {\n  switch (_uniq_21.kind) {\n    case \"Ctor6\": {\n      return _uniq_22;\n    }\n    case \"Ctor7\": {\n      return { kind: \"Ctor7\" };\n    }\n  }\n}\n\nfunction _uniq_15(_uniq_23: _uniq_0, _uniq_24: _uniq_3): _uniq_1 {\n  switch (_uniq_24.kind) {\n    case \"Ctor11\": {\n      return { kind: \"Ctor6\" };\n    }\n    case \"Ctor12\": {\n      let _uniq_27 = _uniq_24.f2;\n      let _uniq_26 = _uniq_24.f1;\n      let _uniq_25 = _uniq_24.f0;\n      switch (_uniq_13(_uniq_25, _uniq_23).kind) {\n        case \"Ctor9\": {\n          return { kind: \"Ctor7\" };\n        }\n        case \"Ctor8\": {\n          return _uniq_14(\n            _uniq_15(_uniq_23, _uniq_26),\n            _uniq_15(_uniq_23, _uniq_27)\n          );\n        }\n        case \"Ctor10\": {\n          return _uniq_14(\n            _uniq_15(_uniq_23, _uniq_26),\n            _uniq_15(_uniq_23, _uniq_27)\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(\n    _uniq_15({ kind: \"Ctor5\", f0: { kind: \"Ctor4\" } }, { kind: \"Ctor11\" }),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(_uniq_15({ kind: \"Ctor4\" }, { kind: \"Ctor11\" }), {\n    kind: \"Ctor6\",\n  });\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: {\n            kind: \"Ctor12\",\n            f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n            f1: { kind: \"Ctor11\" },\n            f2: { kind: \"Ctor11\" },\n          },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n}\nassertions();\n"
    },
    "21": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1 {",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): _uniq_1 {\n  switch (_uniq_7.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor4\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_9 = _uniq_7.f1;\n      let _uniq_8 = _uniq_7.f0;\n      return {\n        kind: \"Ctor5\",\n        f0: _uniq_8,\n        f1: { kind: \"Ctor5\", f0: _uniq_8, f1: _uniq_6(_uniq_9) },\n      };\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6({ kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: {\n              kind: \"Ctor5\",\n              f0: { kind: \"Ctor2\" },\n              f1: {\n                kind: \"Ctor5\",\n                f0: { kind: \"Ctor2\" },\n                f1: { kind: \"Ctor4\" },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "22": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1 {",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\" } | { kind: \"Ctor9\" };\n\nfunction _uniq_10(_uniq_13: _uniq_0, _uniq_14: _uniq_0): _uniq_2 {\n  switch (_uniq_13.kind) {\n    case \"Ctor3\": {\n      switch (_uniq_14.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor8\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_15 = _uniq_14.f0;\n          return { kind: \"Ctor7\" };\n        }\n      }\n    }\n    case \"Ctor4\": {\n      let _uniq_16 = _uniq_13.f0;\n      switch (_uniq_14.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor9\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_17 = _uniq_14.f0;\n          return _uniq_10(_uniq_16, _uniq_17);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_11(_uniq_18: <FILL>, _uniq_19: _uniq_0): _uniq_1 {\n  switch (_uniq_18.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor6\", f0: _uniq_19, f1: { kind: \"Ctor5\" } };\n    }\n    case \"Ctor6\": {\n      let _uniq_21 = _uniq_18.f1;\n      let _uniq_20 = _uniq_18.f0;\n      switch (_uniq_10(_uniq_19, _uniq_20).kind) {\n        case \"Ctor7\": {\n          return {\n            kind: \"Ctor6\",\n            f0: _uniq_19,\n            f1: { kind: \"Ctor6\", f0: _uniq_20, f1: _uniq_21 },\n          };\n        }\n        case \"Ctor8\": {\n          return _uniq_18;\n        }\n        case \"Ctor9\": {\n          return {\n            kind: \"Ctor6\",\n            f0: _uniq_20,\n            f1: _uniq_11(_uniq_21, _uniq_19),\n          };\n        }\n      }\n    }\n  }\n}\n\nfunction _uniq_12(_uniq_22: _uniq_1): _uniq_1 {\n  switch (_uniq_22.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor6\": {\n      let _uniq_24 = _uniq_22.f1;\n      let _uniq_23 = _uniq_22.f0;\n      return _uniq_11(_uniq_12(_uniq_24), _uniq_23);\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_12({ kind: \"Ctor5\" }), { kind: \"Ctor5\" });\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_12({ kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } }),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "23": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_7({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(\n  _uniq_8: _uniq_1\n): (_uniq_9: (__x4: _uniq_0) => _uniq_0) => _uniq_1 {\n  return function (_uniq_9: (__x3: _uniq_0) => _uniq_0) {\n    switch (_uniq_8.kind) {\n      case \"Ctor4\": {\n        return { kind: \"Ctor4\" };\n      }\n      case \"Ctor5\": {\n        let _uniq_11 = _uniq_8.f1;\n        let _uniq_10 = _uniq_8.f0;\n        return {\n          kind: \"Ctor5\",\n          f0: _uniq_9(_uniq_10),\n          f1: _uniq_6(_uniq_11)(_uniq_9),\n        };\n      }\n    }\n  };\n}\n\nfunction _uniq_7(_uniq_12: <FILL>): _uniq_1 {\n  return _uniq_6(_uniq_12)(function (_uniq_13: _uniq_0) {\n    return { kind: \"Ctor3\", f0: _uniq_13 };\n  });\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_7({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n        f1: { kind: \"Ctor4\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: {\n                  kind: \"Ctor3\",\n                  f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n                },\n              },\n            },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n          },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: {\n                  kind: \"Ctor3\",\n                  f0: {\n                    kind: \"Ctor3\",\n                    f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n                  },\n                },\n              },\n            },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n              },\n            },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: {\n            kind: \"Ctor5\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: {\n                  kind: \"Ctor3\",\n                  f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n                },\n              },\n            },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "24": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_1<|endoftext|>",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\" } | { kind: \"Ctor9\" };\n\nfunction _uniq_10(_uniq_13: _uniq_0, _uniq_14: _uniq_0): <FILL> {\n  switch (_uniq_13.kind) {\n    case \"Ctor3\": {\n      switch (_uniq_14.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor8\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_15 = _uniq_14.f0;\n          return { kind: \"Ctor7\" };\n        }\n      }\n    }\n    case \"Ctor4\": {\n      let _uniq_16 = _uniq_13.f0;\n      switch (_uniq_14.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor9\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_17 = _uniq_14.f0;\n          return _uniq_10(_uniq_16, _uniq_17);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_11(_uniq_18: _uniq_1, _uniq_19: _uniq_0): _uniq_1 {\n  switch (_uniq_18.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor6\", f0: _uniq_19, f1: { kind: \"Ctor5\" } };\n    }\n    case \"Ctor6\": {\n      let _uniq_21 = _uniq_18.f1;\n      let _uniq_20 = _uniq_18.f0;\n      switch (_uniq_10(_uniq_19, _uniq_20).kind) {\n        case \"Ctor7\": {\n          return {\n            kind: \"Ctor6\",\n            f0: _uniq_19,\n            f1: { kind: \"Ctor6\", f0: _uniq_20, f1: _uniq_21 },\n          };\n        }\n        case \"Ctor8\": {\n          return _uniq_18;\n        }\n        case \"Ctor9\": {\n          return {\n            kind: \"Ctor6\",\n            f0: _uniq_20,\n            f1: _uniq_11(_uniq_21, _uniq_19),\n          };\n        }\n      }\n    }\n  }\n}\n\nfunction _uniq_12(_uniq_22: _uniq_1): _uniq_1 {\n  switch (_uniq_22.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor6\": {\n      let _uniq_24 = _uniq_22.f1;\n      let _uniq_23 = _uniq_22.f0;\n      return _uniq_11(_uniq_12(_uniq_24), _uniq_23);\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_12({ kind: \"Ctor5\" }), { kind: \"Ctor5\" });\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_12({ kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } }),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "25": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_1 =",
        "gold": "(_uniq_19 _uniq_0) => _uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\" } | { kind: \"Ctor9\" };\n\nfunction _uniq_10(_uniq_13: _uniq_0): (_uniq_14: _uniq_0) => _uniq_2 {\n  return function (_uniq_14: _uniq_0) {\n    switch (_uniq_13.kind) {\n      case \"Ctor3\": {\n        switch (_uniq_14.kind) {\n          case \"Ctor3\": {\n            return { kind: \"Ctor8\" };\n          }\n          case \"Ctor4\": {\n            let _uniq_15 = _uniq_14.f0;\n            return { kind: \"Ctor7\" };\n          }\n        }\n      }\n      case \"Ctor4\": {\n        let _uniq_16 = _uniq_13.f0;\n        switch (_uniq_14.kind) {\n          case \"Ctor3\": {\n            return { kind: \"Ctor9\" };\n          }\n          case \"Ctor4\": {\n            let _uniq_17 = _uniq_14.f0;\n            return _uniq_10(_uniq_16)(_uniq_17);\n          }\n        }\n      }\n    }\n  };\n}\nfunction _uniq_11(_uniq_18: _uniq_1): <FILL> {\n  return function (_uniq_19: _uniq_0) {\n    switch (_uniq_18.kind) {\n      case \"Ctor5\": {\n        return { kind: \"Ctor6\", f0: _uniq_19, f1: { kind: \"Ctor5\" } };\n      }\n      case \"Ctor6\": {\n        let _uniq_21 = _uniq_18.f1;\n        let _uniq_20 = _uniq_18.f0;\n        switch (_uniq_10(_uniq_19)(_uniq_20).kind) {\n          case \"Ctor7\": {\n            return {\n              kind: \"Ctor6\",\n              f0: _uniq_19,\n              f1: { kind: \"Ctor6\", f0: _uniq_20, f1: _uniq_21 },\n            };\n          }\n          case \"Ctor8\": {\n            return _uniq_18;\n          }\n          case \"Ctor9\": {\n            return {\n              kind: \"Ctor6\",\n              f0: _uniq_20,\n              f1: _uniq_11(_uniq_21)(_uniq_19),\n            };\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction _uniq_12(_uniq_22: _uniq_1): _uniq_1 {\n  switch (_uniq_22.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor6\": {\n      let _uniq_24 = _uniq_22.f1;\n      let _uniq_23 = _uniq_22.f0;\n      return _uniq_11(_uniq_12(_uniq_24))(_uniq_23);\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_12({ kind: \"Ctor5\" }), { kind: \"Ctor5\" });\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_12({ kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } }),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "26": {
        "old": "nlist",
        "new": "<fim_middle>nlist<|endoftext|><fim_prefix><fim_suffix>",
        "gold": "(l2 nlist) => nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\ntype llist = { kind: \"LNil\" } | { kind: \"LCons\"; f0: nlist; f1: llist };\n\nfunction append(l1: nlist): <FILL> {\n  return function (l2: nlist) {\n    switch (l1.kind) {\n      case \"Nil\": {\n        return l2;\n      }\n      case \"Cons\": {\n        let l1p = l1.f1;\n        let x = l1.f0;\n        return { kind: \"Cons\", f0: x, f1: append(l1p)(l2) };\n      }\n    }\n  };\n}\n\nfunction concat(lol: llist): nlist {\n  switch (lol.kind) {\n    case \"LNil\": {\n      return { kind: \"Nil\" };\n    }\n    case \"LCons\": {\n      let ls = lol.f1;\n      let l = lol.f0;\n      return append(l)(concat(ls));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(concat({ kind: \"LNil\" }), { kind: \"Nil\" });\n  assert.deepEqual(\n    concat({\n      kind: \"LCons\",\n      f0: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      f1: { kind: \"LNil\" },\n    }),\n    { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    concat({\n      kind: \"LCons\",\n      f0: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      f1: {\n        kind: \"LCons\",\n        f0: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        f1: { kind: \"LNil\" },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n  assert.deepEqual(\n    concat({\n      kind: \"LCons\",\n      f0: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n      f1: { kind: \"LNil\" },\n    }),\n    { kind: \"Cons\", f0: { kind: \"S\", f0: { kind: \"Z\" } }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    concat({\n      kind: \"LCons\",\n      f0: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n      f1: {\n        kind: \"LCons\",\n        f0: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Nil\" },\n        },\n        f1: { kind: \"LNil\" },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    concat({\n      kind: \"LCons\",\n      f0: { kind: \"Nil\" },\n      f1: {\n        kind: \"LCons\",\n        f0: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        f1: {\n          kind: \"LCons\",\n          f0: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n          f1: { kind: \"LNil\" },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n  assert.deepEqual(\n    concat({\n      kind: \"LCons\",\n      f0: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Nil\" },\n      },\n      f1: { kind: \"LNil\" },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: { kind: \"Nil\" },\n    }\n  );\n  assert.deepEqual(\n    concat({\n      kind: \"LCons\",\n      f0: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n      f1: {\n        kind: \"LCons\",\n        f0: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n          f1: { kind: \"Nil\" },\n        },\n        f1: { kind: \"LNil\" },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "27": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_6({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(\n  _uniq_9: _uniq_1\n): (\n  _uniq_10: (__x8: _uniq_1) => (__x9: _uniq_0) => _uniq_1\n) => (_uniq_11: _uniq_1) => _uniq_1 {\n  return function (_uniq_10: (__x6: _uniq_1) => (__x7: _uniq_0) => _uniq_1) {\n    return function (_uniq_11: _uniq_1) {\n      switch (_uniq_9.kind) {\n        case \"Ctor4\": {\n          return _uniq_11;\n        }\n        case \"Ctor5\": {\n          let _uniq_13 = _uniq_9.f1;\n          let _uniq_12 = _uniq_9.f0;\n          return _uniq_6(_uniq_13)(_uniq_10)(_uniq_10(_uniq_11)(_uniq_12));\n        }\n      }\n    };\n  };\n}\nfunction _uniq_7(_uniq_14: <FILL>): (_uniq_15: _uniq_0) => _uniq_1 {\n  return function (_uniq_15: _uniq_0) {\n    switch (_uniq_14.kind) {\n      case \"Ctor4\": {\n        return { kind: \"Ctor5\", f0: _uniq_15, f1: { kind: \"Ctor4\" } };\n      }\n      case \"Ctor5\": {\n        let _uniq_17 = _uniq_14.f1;\n        let _uniq_16 = _uniq_14.f0;\n        return { kind: \"Ctor5\", f0: _uniq_16, f1: _uniq_7(_uniq_17)(_uniq_15) };\n      }\n    }\n  };\n}\n\nfunction _uniq_8(_uniq_18: _uniq_1): _uniq_1 {\n  return _uniq_6(_uniq_18)(function (_uniq_19: _uniq_1) {\n    return function (_uniq_20: _uniq_0) {\n      return { kind: \"Ctor5\", f0: _uniq_20, f1: _uniq_19 };\n    };\n  })({ kind: \"Ctor4\" });\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_8({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nvalidations();\n"
    },
    "28": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1<|endoftext|>",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>, _uniq_8: _uniq_1): _uniq_1 {\n  switch (_uniq_7.kind) {\n    case \"Ctor4\": {\n      return _uniq_8;\n    }\n    case \"Ctor5\": {\n      let _uniq_10 = _uniq_7.f1;\n      let _uniq_9 = _uniq_7.f0;\n      return { kind: \"Ctor5\", f0: _uniq_9, f1: _uniq_6(_uniq_10, _uniq_8) };\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }, { kind: \"Ctor4\" }), {\n    kind: \"Ctor4\",\n  });\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n      { kind: \"Ctor4\" }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n      { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      { kind: \"Ctor4\" }\n    ),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n      { kind: \"Ctor4\" }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n}\nvalidations();\n"
    },
    "29": {
        "old": "nat",
        "new": "<fim_middle>nat<|endoftext|><fim_prefix><fim_suffix>t",
        "gold": "nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction list_rev_tailcall(rem: <FILL>): (acc: nlist) => nlist {\n  return function (acc: nlist) {\n    switch (rem.kind) {\n      case \"Nil\": {\n        return acc;\n      }\n      case \"Cons\": {\n        let xs = rem.f1;\n        let x = rem.f0;\n        return list_rev_tailcall(xs)({ kind: \"Cons\", f0: x, f1: acc });\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(list_rev_tailcall({ kind: \"Nil\" })({ kind: \"Nil\" }), {\n    kind: \"Nil\",\n  });\n  assert.deepEqual(\n    list_rev_tailcall({ kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } })(\n      { kind: \"Nil\" }\n    ),\n    { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"Nil\" }),\n    { kind: \"Cons\", f0: { kind: \"S\", f0: { kind: \"Z\" } }, f1: { kind: \"Nil\" } }\n  );\n}\nvalidations();\n"
    },
    "30": {
        "old": "nat",
        "new": "<fim_middle>nat;\n\n\n",
        "gold": "(n2 nat) => nat",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype tree = { kind: \"Leaf\" } | { kind: \"Node\"; f0: nat; f1: tree; f2: tree };\n\nfunction add(n1: nat): <FILL> {\n  return function (n2: nat) {\n    switch (n1.kind) {\n      case \"Z\": {\n        return n2;\n      }\n      case \"S\": {\n        let n3 = n1.f0;\n        return { kind: \"S\", f0: add(n3)(n2) };\n      }\n    }\n  };\n}\n\nfunction tree_sum(t: tree): nat {\n  switch (t.kind) {\n    case \"Leaf\": {\n      return { kind: \"Z\" };\n    }\n    case \"Node\": {\n      let rt = t.f2;\n      let lt = t.f1;\n      let n = t.f0;\n      return add(add(n)(tree_sum(lt)))(tree_sum(rt));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(tree_sum({ kind: \"Leaf\" }), { kind: \"Z\" });\n  assert.deepEqual(\n    tree_sum({\n      kind: \"Node\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: { kind: \"Leaf\" },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }\n  );\n  assert.deepEqual(\n    tree_sum({\n      kind: \"Node\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }\n  );\n  assert.deepEqual(\n    tree_sum({\n      kind: \"Node\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Leaf\" },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } } }\n  );\n  assert.deepEqual(\n    tree_sum({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } } }\n  );\n  assert.deepEqual(\n    tree_sum({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } } }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    tree_sum({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: {\n          kind: \"Node\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"Z\" },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"Z\" }\n  );\n  assert.deepEqual(\n    tree_sum({\n      kind: \"Node\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    tree_sum({\n      kind: \"Node\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: { kind: \"Leaf\" },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "31": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1 |",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_8: <FILL>): (_uniq_9: _uniq_0) => _uniq_1 {\n  return function (_uniq_9: _uniq_0) {\n    switch (_uniq_8.kind) {\n      case \"Ctor4\": {\n        return { kind: \"Ctor5\", f0: _uniq_9, f1: { kind: \"Ctor4\" } };\n      }\n      case \"Ctor5\": {\n        let _uniq_11 = _uniq_8.f1;\n        let _uniq_10 = _uniq_8.f0;\n        return { kind: \"Ctor5\", f0: _uniq_10, f1: _uniq_6(_uniq_11)(_uniq_9) };\n      }\n    }\n  };\n}\n\nfunction _uniq_7(_uniq_12: _uniq_1): _uniq_1 {\n  switch (_uniq_12.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor4\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_14 = _uniq_12.f1;\n      let _uniq_13 = _uniq_12.f0;\n      return _uniq_6(_uniq_7(_uniq_14))(_uniq_13);\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_7({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_7({ kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_7({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nvalidations();\n"
    },
    "32": {
        "old": "nlist",
        "new": "<fim_middle>nat<|endoftext|><fim_prefix><fim_suffix>t",
        "gold": "(l2 nlist) => nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction append(l1: nlist): <FILL> {\n  return function (l2: nlist) {\n    switch (l1.kind) {\n      case \"Nil\": {\n        return l2;\n      }\n      case \"Cons\": {\n        let xs = l1.f1;\n        let x = l1.f0;\n        return { kind: \"Cons\", f0: x, f1: append(xs)(l2) };\n      }\n    }\n  };\n}\n\nfunction list_rev_append(l: nlist): nlist {\n  switch (l.kind) {\n    case \"Nil\": {\n      return { kind: \"Nil\" };\n    }\n    case \"Cons\": {\n      let xs = l.f1;\n      let x = l.f0;\n      return append(list_rev_append(xs))({\n        kind: \"Cons\",\n        f0: x,\n        f1: { kind: \"Nil\" },\n      });\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(list_rev_append({ kind: \"Nil\" }), { kind: \"Nil\" });\n  assert.deepEqual(\n    list_rev_append({ kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }),\n    { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    list_rev_append({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_rev_append({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_append({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: {\n                kind: \"S\",\n                f0: {\n                  kind: \"S\",\n                  f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n                },\n              },\n            },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_append({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"Z\" } },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"Z\" } },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_append({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: {\n            kind: \"Cons\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "33": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1 |",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): (_uniq_8: _uniq_1) => _uniq_1 {\n  return function (_uniq_8: _uniq_1) {\n    switch (_uniq_7.kind) {\n      case \"Ctor4\": {\n        return _uniq_8;\n      }\n      case \"Ctor5\": {\n        let _uniq_10 = _uniq_7.f1;\n        let _uniq_9 = _uniq_7.f0;\n        return _uniq_6(_uniq_10)({ kind: \"Ctor5\", f0: _uniq_9, f1: _uniq_8 });\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" })({ kind: \"Ctor4\" }), {\n    kind: \"Ctor4\",\n  });\n  assert.deepEqual(\n    _uniq_6({ kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } })({\n      kind: \"Ctor4\",\n    }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor4\" }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    })({ kind: \"Ctor4\" }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    })({ kind: \"Ctor4\" }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    })({ kind: \"Ctor4\" }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    })({ kind: \"Ctor4\" }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nvalidations();\n"
    },
    "34": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_9({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 =\n  | { kind: \"Ctor7\" }\n  | { kind: \"Ctor8\"; f0: _uniq_2; f1: _uniq_0; f2: _uniq_2 };\n\nfunction _uniq_9(_uniq_11: <FILL>, _uniq_12: _uniq_1): _uniq_1 {\n  switch (_uniq_11.kind) {\n    case \"Ctor5\": {\n      return _uniq_12;\n    }\n    case \"Ctor6\": {\n      let _uniq_14 = _uniq_11.f1;\n      let _uniq_13 = _uniq_11.f0;\n      return { kind: \"Ctor6\", f0: _uniq_13, f1: _uniq_9(_uniq_14, _uniq_12) };\n    }\n  }\n}\n\nfunction _uniq_10(_uniq_15: _uniq_2): _uniq_1 {\n  switch (_uniq_15.kind) {\n    case \"Ctor7\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor8\": {\n      let _uniq_18 = _uniq_15.f2;\n      let _uniq_17 = _uniq_15.f1;\n      let _uniq_16 = _uniq_15.f0;\n      return _uniq_9(\n        { kind: \"Ctor6\", f0: _uniq_17, f1: _uniq_10(_uniq_16) },\n        _uniq_10(_uniq_18)\n      );\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_10({ kind: \"Ctor7\" }), { kind: \"Ctor5\" });\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      f1: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f2: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                  },\n                },\n              },\n            },\n          },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor3\" },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n            f1: {\n              kind: \"Ctor6\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                    },\n                  },\n                },\n              },\n              f1: {\n                kind: \"Ctor6\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                    },\n                  },\n                },\n                f1: {\n                  kind: \"Ctor6\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: {\n                        kind: \"Ctor4\",\n                        f0: {\n                          kind: \"Ctor4\",\n                          f0: {\n                            kind: \"Ctor4\",\n                            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                          },\n                        },\n                      },\n                    },\n                  },\n                  f1: { kind: \"Ctor5\" },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: {\n              kind: \"Ctor6\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n              f1: { kind: \"Ctor5\" },\n            },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "35": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_0<|endoftext|>",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: _uniq_1): <FILL> {\n  switch (_uniq_7.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor4\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_9 = _uniq_7.f1;\n      let _uniq_8 = _uniq_7.f0;\n      return _uniq_9;\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n}\nvalidations();\n"
    },
    "36": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_12",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\" };\n\nfunction _uniq_9(_uniq_13: _uniq_0, _uniq_14: _uniq_0): _uniq_0 {\n  switch (_uniq_13.kind) {\n    case \"Ctor3\": {\n      return _uniq_14;\n    }\n    case \"Ctor4\": {\n      let _uniq_15 = _uniq_13.f0;\n      return { kind: \"Ctor4\", f0: _uniq_9(_uniq_15, _uniq_14) };\n    }\n  }\n}\nfunction _uniq_10(_uniq_16: _uniq_0): _uniq_2 {\n  switch (_uniq_16.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor8\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_17 = _uniq_16.f0;\n      switch (_uniq_17.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor7\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_18 = _uniq_17.f0;\n          return _uniq_10(_uniq_18);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_11(_uniq_19: _uniq_0, _uniq_20: _uniq_0): _uniq_0 {\n  switch (_uniq_10(_uniq_20).kind) {\n    case \"Ctor7\": {\n      return { kind: \"Ctor4\", f0: _uniq_19 };\n    }\n    case \"Ctor8\": {\n      return _uniq_19;\n    }\n  }\n}\n\nfunction _uniq_12(\n  _uniq_21: (__x1: _uniq_0, __x2: _uniq_0) => _uniq_0,\n  _uniq_22: _uniq_0,\n  _uniq_23: <FILL>\n): _uniq_0 {\n  switch (_uniq_23.kind) {\n    case \"Ctor5\": {\n      return _uniq_22;\n    }\n    case \"Ctor6\": {\n      let _uniq_25 = _uniq_23.f1;\n      let _uniq_24 = _uniq_23.f0;\n      return _uniq_12(_uniq_21, _uniq_21(_uniq_22, _uniq_24), _uniq_25);\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_12(_uniq_9, { kind: \"Ctor3\" }, { kind: \"Ctor5\" }), {\n    kind: \"Ctor3\",\n  });\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor4\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: {\n              kind: \"Ctor6\",\n              f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              f1: { kind: \"Ctor5\" },\n            },\n          },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor3\" },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor3\" },\n            f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n          },\n        },\n      }\n    ),\n    { kind: \"Ctor3\" }\n  );\n}\nvalidations();\n"
    },
    "37": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_12",
        "gold": "(__x1 _uniq_0, __x2 _uniq_0) => _uniq_0",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\" };\n\nfunction _uniq_9(_uniq_13: _uniq_0, _uniq_14: _uniq_0): _uniq_0 {\n  switch (_uniq_13.kind) {\n    case \"Ctor3\": {\n      return _uniq_14;\n    }\n    case \"Ctor4\": {\n      let _uniq_15 = _uniq_13.f0;\n      return { kind: \"Ctor4\", f0: _uniq_9(_uniq_15, _uniq_14) };\n    }\n  }\n}\nfunction _uniq_10(_uniq_16: _uniq_0): _uniq_2 {\n  switch (_uniq_16.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor8\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_17 = _uniq_16.f0;\n      switch (_uniq_17.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor7\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_18 = _uniq_17.f0;\n          return _uniq_10(_uniq_18);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_11(_uniq_19: _uniq_0, _uniq_20: _uniq_0): _uniq_0 {\n  switch (_uniq_10(_uniq_20).kind) {\n    case \"Ctor7\": {\n      return { kind: \"Ctor4\", f0: _uniq_19 };\n    }\n    case \"Ctor8\": {\n      return _uniq_19;\n    }\n  }\n}\n\nfunction _uniq_12(\n  _uniq_21: <FILL>,\n  _uniq_22: _uniq_0,\n  _uniq_23: _uniq_1\n): _uniq_0 {\n  switch (_uniq_23.kind) {\n    case \"Ctor5\": {\n      return _uniq_22;\n    }\n    case \"Ctor6\": {\n      let _uniq_25 = _uniq_23.f1;\n      let _uniq_24 = _uniq_23.f0;\n      return _uniq_12(_uniq_21, _uniq_21(_uniq_22, _uniq_24), _uniq_25);\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_12(_uniq_9, { kind: \"Ctor3\" }, { kind: \"Ctor5\" }), {\n    kind: \"Ctor3\",\n  });\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor4\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: {\n              kind: \"Ctor6\",\n              f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              f1: { kind: \"Ctor5\" },\n            },\n          },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_12(\n      _uniq_9,\n      { kind: \"Ctor3\" },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor3\" },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor3\" },\n            f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n          },\n        },\n      }\n    ),\n    { kind: \"Ctor3\" }\n  );\n}\nvalidations();\n"
    },
    "38": {
        "old": "bbool",
        "new": "<fim_middle>nat;\nfunction bool",
        "gold": "(b2 bbool) => bbool",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype tree = { kind: \"Leaf\" } | { kind: \"Node\"; f0: nat; f1: tree; f2: tree };\ntype bbool = { kind: \"True\" } | { kind: \"False\" };\ntype cmp = { kind: \"LT\" } | { kind: \"EQ\" } | { kind: \"GT\" };\n\nfunction compare(x1: nat): (x2: nat) => cmp {\n  return function (x2: nat) {\n    switch (x1.kind) {\n      case \"Z\": {\n        switch (x2.kind) {\n          case \"Z\": {\n            return { kind: \"EQ\" };\n          }\n          case \"S\": {\n            let n1 = x2.f0;\n            return { kind: \"LT\" };\n          }\n        }\n      }\n      case \"S\": {\n        let n1 = x1.f0;\n        switch (x2.kind) {\n          case \"Z\": {\n            return { kind: \"GT\" };\n          }\n          case \"S\": {\n            let n2 = x2.f0;\n            return compare(n1)(n2);\n          }\n        }\n      }\n    }\n  };\n}\nfunction max(n1: nat): (n2: nat) => nat {\n  return function (n2: nat) {\n    switch (compare(n1)(n2).kind) {\n      case \"LT\": {\n        return n2;\n      }\n      case \"EQ\": {\n        return n1;\n      }\n      case \"GT\": {\n        return n1;\n      }\n    }\n  };\n}\nfunction height(t: tree): nat {\n  switch (t.kind) {\n    case \"Leaf\": {\n      return { kind: \"Z\" };\n    }\n    case \"Node\": {\n      let rt = t.f2;\n      let lt = t.f1;\n      let v = t.f0;\n      switch (lt.kind) {\n        case \"Leaf\": {\n          return { kind: \"S\", f0: height(rt) };\n        }\n        case \"Node\": {\n          let lrt = lt.f2;\n          let llt = lt.f1;\n          let lv = lt.f0;\n          switch (rt.kind) {\n            case \"Leaf\": {\n              return { kind: \"S\", f0: height(lt) };\n            }\n            case \"Node\": {\n              let rrt = rt.f2;\n              let rlt = rt.f1;\n              let rv = rt.f0;\n              return { kind: \"S\", f0: max(height(lt))(height(rt)) };\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction bool_band(b1: bbool): <FILL> {\n  return function (b2: bbool) {\n    switch (b1.kind) {\n      case \"True\": {\n        return b2;\n      }\n      case \"False\": {\n        return { kind: \"False\" };\n      }\n    }\n  };\n}\n\nfunction tree_balanced(t: tree): bbool {\n  switch (t.kind) {\n    case \"Leaf\": {\n      return { kind: \"True\" };\n    }\n    case \"Node\": {\n      let rt = t.f2;\n      let lt = t.f1;\n      let v = t.f0;\n      let lth: nat = height(lt);\n      let rth: nat = height(rt);\n      switch (compare(lth)(rth).kind) {\n        case \"EQ\": {\n          return bool_band(tree_balanced(lt))(tree_balanced(rt));\n        }\n        case \"LT\": {\n          switch (rth.kind) {\n            case \"Z\": {\n              return { kind: \"False\" };\n            }\n            case \"S\": {\n              let n = rth.f0;\n              switch (compare(lth)(n).kind) {\n                case \"EQ\": {\n                  return bool_band(tree_balanced(lt))(tree_balanced(rt));\n                }\n                case \"LT\": {\n                  return { kind: \"False\" };\n                }\n                case \"GT\": {\n                  return { kind: \"False\" };\n                }\n              }\n            }\n          }\n        }\n        case \"GT\": {\n          switch (lth.kind) {\n            case \"Z\": {\n              return { kind: \"False\" };\n            }\n            case \"S\": {\n              let n = lth.f0;\n              switch (compare(rth)(n).kind) {\n                case \"EQ\": {\n                  return bool_band(tree_balanced(lt))(tree_balanced(rt));\n                }\n                case \"LT\": {\n                  return { kind: \"False\" };\n                }\n                case \"GT\": {\n                  return { kind: \"False\" };\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(tree_balanced({ kind: \"Leaf\" }), { kind: \"True\" });\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Leaf\" },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"True\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"True\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"False\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"True\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: {\n            kind: \"Node\",\n            f0: { kind: \"S\", f0: { kind: \"Z\" } },\n            f1: { kind: \"Leaf\" },\n            f2: { kind: \"Leaf\" },\n          },\n        },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"False\" }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"False\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Leaf\" },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"False\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Node\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"Z\" },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"True\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: {\n          kind: \"Node\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"True\" }\n  );\n}\nvalidations();\n"
    },
    "39": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_0 {",
        "gold": "(_uniq_15 _uniq_0) => _uniq_0",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(\n  _uniq_9: _uniq_1\n): (\n  _uniq_10: (__x12: _uniq_0) => (__x13: _uniq_0) => _uniq_0\n) => (_uniq_11: _uniq_0) => _uniq_0 {\n  return function (_uniq_10: (__x10: _uniq_0) => (__x11: _uniq_0) => _uniq_0) {\n    return function (_uniq_11: _uniq_0) {\n      switch (_uniq_9.kind) {\n        case \"Ctor4\": {\n          return _uniq_11;\n        }\n        case \"Ctor5\": {\n          let _uniq_13 = _uniq_9.f1;\n          let _uniq_12 = _uniq_9.f0;\n          return _uniq_6(_uniq_13)(_uniq_10)(_uniq_10(_uniq_11)(_uniq_12));\n        }\n      }\n    };\n  };\n}\nfunction _uniq_7(_uniq_14: _uniq_0): <FILL> {\n  return function (_uniq_15: _uniq_0) {\n    switch (_uniq_14.kind) {\n      case \"Ctor2\": {\n        return _uniq_15;\n      }\n      case \"Ctor3\": {\n        let _uniq_16 = _uniq_14.f0;\n        return { kind: \"Ctor3\", f0: _uniq_7(_uniq_16)(_uniq_15) };\n      }\n    }\n  };\n}\n\nfunction _uniq_8(_uniq_17: _uniq_1): _uniq_0 {\n  return _uniq_6(_uniq_17)(_uniq_7)({ kind: \"Ctor2\" });\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_8({ kind: \"Ctor4\" }), { kind: \"Ctor2\" });\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_8({ kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: {\n                  kind: \"Ctor3\",\n                  f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n                },\n              },\n            },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor3\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: {\n                  kind: \"Ctor3\",\n                  f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "40": {
        "old": "nat",
        "new": "<fim_middle>nat<|endoftext|><fim_prefix><fim_suffix>t",
        "gold": "nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction list_stutter(lox: <FILL>): nlist {\n  switch (lox.kind) {\n    case \"Nil\": {\n      return { kind: \"Nil\" };\n    }\n    case \"Cons\": {\n      let xs = lox.f1;\n      let x = lox.f0;\n      return {\n        kind: \"Cons\",\n        f0: x,\n        f1: { kind: \"Cons\", f0: x, f1: list_stutter(xs) },\n      };\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(list_stutter({ kind: \"Nil\" }), { kind: \"Nil\" });\n  assert.deepEqual(\n    list_stutter({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_stutter({ kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n  assert.deepEqual(\n    list_stutter({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"Z\" } },\n            f1: {\n              kind: \"Cons\",\n              f0: { kind: \"Z\" },\n              f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n            },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "41": {
        "old": "nat",
        "new": "<fim_middle>nat);\n\n\n",
        "gold": "(__x14 nat) => nat",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\ntype tree = { kind: \"Leaf\" } | { kind: \"Node\"; f0: tree; f1: nat; f2: tree };\n\nfunction div2(n: nat): nat {\n  switch (n.kind) {\n    case \"Z\": {\n      return { kind: \"Z\" };\n    }\n    case \"S\": {\n      let n1 = n.f0;\n      switch (n1.kind) {\n        case \"Z\": {\n          return { kind: \"Z\" };\n        }\n        case \"S\": {\n          let n2 = n1.f0;\n          return { kind: \"S\", f0: div2(n2) };\n        }\n      }\n    }\n  }\n}\nfunction inc(n: nat): nat {\n  return { kind: \"S\", f0: n };\n}\n\nfunction tree_map(f: <FILL>): (t: tree) => tree {\n  return function (t: tree) {\n    switch (t.kind) {\n      case \"Leaf\": {\n        return { kind: \"Leaf\" };\n      }\n      case \"Node\": {\n        let r = t.f2;\n        let n = t.f1;\n        let l = t.f0;\n        return {\n          kind: \"Node\",\n          f0: tree_map(f)(l),\n          f1: f(n),\n          f2: tree_map(f)(r),\n        };\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(tree_map(div2)({ kind: \"Leaf\" }), { kind: \"Leaf\" });\n  assert.deepEqual(\n    tree_map(div2)({\n      kind: \"Node\",\n      f0: {\n        kind: \"Node\",\n        f0: { kind: \"Leaf\" },\n        f1: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f2: { kind: \"Leaf\" },\n      },\n      f1: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f2: { kind: \"Leaf\" },\n    }),\n    {\n      kind: \"Node\",\n      f0: {\n        kind: \"Node\",\n        f0: { kind: \"Leaf\" },\n        f1: { kind: \"S\", f0: { kind: \"Z\" } },\n        f2: { kind: \"Leaf\" },\n      },\n      f1: { kind: \"S\", f0: { kind: \"Z\" } },\n      f2: { kind: \"Leaf\" },\n    }\n  );\n  assert.deepEqual(\n    tree_map(div2)({\n      kind: \"Node\",\n      f0: { kind: \"Leaf\" },\n      f1: { kind: \"S\", f0: { kind: \"Z\" } },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"Leaf\" },\n        f1: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    {\n      kind: \"Node\",\n      f0: { kind: \"Leaf\" },\n      f1: { kind: \"Z\" },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"Leaf\" },\n        f1: { kind: \"S\", f0: { kind: \"Z\" } },\n        f2: { kind: \"Leaf\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    tree_map(inc)({\n      kind: \"Node\",\n      f0: { kind: \"Leaf\" },\n      f1: { kind: \"Z\" },\n      f2: { kind: \"Leaf\" },\n    }),\n    {\n      kind: \"Node\",\n      f0: { kind: \"Leaf\" },\n      f1: { kind: \"S\", f0: { kind: \"Z\" } },\n      f2: { kind: \"Leaf\" },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    tree_map(inc)({\n      kind: \"Node\",\n      f0: {\n        kind: \"Node\",\n        f0: { kind: \"Leaf\" },\n        f1: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f2: { kind: \"Leaf\" },\n      },\n      f1: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f2: { kind: \"Leaf\" },\n    }),\n    {\n      kind: \"Node\",\n      f0: {\n        kind: \"Node\",\n        f0: { kind: \"Leaf\" },\n        f1: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n      f1: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f2: { kind: \"Leaf\" },\n    }\n  );\n  assert.deepEqual(\n    tree_map(function (n: nat) {\n      switch (n.kind) {\n        case \"Z\": {\n          return { kind: \"Z\" };\n        }\n        case \"S\": {\n          let np = n.f0;\n          return np;\n        }\n      }\n    })({\n      kind: \"Node\",\n      f0: { kind: \"Leaf\" },\n      f1: { kind: \"S\", f0: { kind: \"Z\" } },\n      f2: {\n        kind: \"Node\",\n        f0: {\n          kind: \"Node\",\n          f0: { kind: \"Leaf\" },\n          f1: { kind: \"Z\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f1: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f2: {\n          kind: \"Node\",\n          f0: { kind: \"Leaf\" },\n          f1: { kind: \"S\", f0: { kind: \"Z\" } },\n          f2: { kind: \"Leaf\" },\n        },\n      },\n    }),\n    {\n      kind: \"Node\",\n      f0: { kind: \"Leaf\" },\n      f1: { kind: \"Z\" },\n      f2: {\n        kind: \"Node\",\n        f0: {\n          kind: \"Node\",\n          f0: { kind: \"Leaf\" },\n          f1: { kind: \"Z\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f1: { kind: \"S\", f0: { kind: \"Z\" } },\n        f2: {\n          kind: \"Node\",\n          f0: { kind: \"Leaf\" },\n          f1: { kind: \"Z\" },\n          f2: { kind: \"Leaf\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    tree_map(function (n: nat) {\n      return n;\n    })({\n      kind: \"Node\",\n      f0: { kind: \"Leaf\" },\n      f1: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    {\n      kind: \"Node\",\n      f0: { kind: \"Leaf\" },\n      f1: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f2: { kind: \"Leaf\" },\n    }\n  );\n}\nvalidations();\n"
    },
    "42": {
        "old": "cmp",
        "new": "<fim_middle>nat.compare = compare",
        "gold": "(x2 nat) => cmp",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype exp =\n  | { kind: \"Int\"; f0: nat }\n  | { kind: \"Add\"; f0: exp; f1: exp }\n  | { kind: \"Sub\"; f0: exp; f1: exp }\n  | { kind: \"Mul\"; f0: exp; f1: exp }\n  | { kind: \"Div\"; f0: exp; f1: exp };\ntype cmp = { kind: \"LT\" } | { kind: \"EQ\" } | { kind: \"GT\" };\n\nfunction compare(x1: nat): <FILL> {\n  return function (x2: nat) {\n    switch (x1.kind) {\n      case \"Z\": {\n        switch (x2.kind) {\n          case \"Z\": {\n            return { kind: \"EQ\" };\n          }\n          case \"S\": {\n            let n1 = x2.f0;\n            return { kind: \"LT\" };\n          }\n        }\n      }\n      case \"S\": {\n        let n1 = x1.f0;\n        switch (x2.kind) {\n          case \"Z\": {\n            return { kind: \"GT\" };\n          }\n          case \"S\": {\n            let n2 = x2.f0;\n            return compare(n1)(n2);\n          }\n        }\n      }\n    }\n  };\n}\nfunction add(n1: nat): (n2: nat) => nat {\n  return function (n2: nat) {\n    switch (n1.kind) {\n      case \"Z\": {\n        return n2;\n      }\n      case \"S\": {\n        let n3 = n1.f0;\n        return { kind: \"S\", f0: add(n3)(n2) };\n      }\n    }\n  };\n}\nfunction sub(n1: nat): (n2: nat) => nat {\n  return function (n2: nat) {\n    switch (n1.kind) {\n      case \"Z\": {\n        return { kind: \"Z\" };\n      }\n      case \"S\": {\n        let n3 = n1.f0;\n        switch (n2.kind) {\n          case \"Z\": {\n            return n1;\n          }\n          case \"S\": {\n            let n4 = n2.f0;\n            return sub(n3)(n4);\n          }\n        }\n      }\n    }\n  };\n}\nfunction mul(n1: nat): (n2: nat) => nat {\n  return function (n2: nat) {\n    switch (n1.kind) {\n      case \"Z\": {\n        return { kind: \"Z\" };\n      }\n      case \"S\": {\n        let n3 = n1.f0;\n        return add(n2)(mul(n3)(n2));\n      }\n    }\n  };\n}\nfunction div(n1: nat): (n2: nat) => nat {\n  return function (n2: nat) {\n    switch (n2.kind) {\n      case \"Z\": {\n        return { kind: \"Z\" };\n      }\n      case \"S\": {\n        let n4 = n2.f0;\n        switch (n1.kind) {\n          case \"Z\": {\n            return { kind: \"Z\" };\n          }\n          case \"S\": {\n            let n3 = n1.f0;\n            switch (compare(n1)(n2).kind) {\n              case \"LT\": {\n                return { kind: \"Z\" };\n              }\n              case \"EQ\": {\n                return { kind: \"S\", f0: { kind: \"Z\" } };\n              }\n              case \"GT\": {\n                return { kind: \"S\", f0: div(sub(n1)(n2))(n2) };\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction expr_eval(e: exp): nat {\n  switch (e.kind) {\n    case \"Int\": {\n      let n = e.f0;\n      return n;\n    }\n    case \"Add\": {\n      let e2 = e.f1;\n      let e1 = e.f0;\n      return add(expr_eval(e1))(expr_eval(e2));\n    }\n    case \"Mul\": {\n      let e2 = e.f1;\n      let e1 = e.f0;\n      return mul(expr_eval(e1))(expr_eval(e2));\n    }\n    case \"Sub\": {\n      let e2 = e.f1;\n      let e1 = e.f0;\n      return sub(expr_eval(e1))(expr_eval(e2));\n    }\n    case \"Div\": {\n      let e2 = e.f1;\n      let e1 = e.f0;\n      return div(expr_eval(e1))(expr_eval(e2));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(\n    expr_eval({ kind: \"Int\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    { kind: \"S\", f0: { kind: \"Z\" } }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Add\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Mul\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: {\n                kind: \"S\",\n                f0: {\n                  kind: \"S\",\n                  f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Mul\",\n      f0: {\n        kind: \"Int\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Sub\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n    }),\n    { kind: \"S\", f0: { kind: \"Z\" } }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Sub\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n        },\n      },\n      f1: { kind: \"Int\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Div\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    }),\n    { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Div\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n    }),\n    { kind: \"S\", f0: { kind: \"Z\" } }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Add\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: {\n                kind: \"S\",\n                f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Mul\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: {\n                kind: \"S\",\n                f0: {\n                  kind: \"S\",\n                  f0: {\n                    kind: \"S\",\n                    f0: {\n                      kind: \"S\",\n                      f0: {\n                        kind: \"S\",\n                        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    expr_eval({\n      kind: \"Div\",\n      f0: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Int\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n    }),\n    { kind: \"S\", f0: { kind: \"Z\" } }\n  );\n}\nvalidations();\n"
    },
    "43": {
        "old": "bbool",
        "new": "<fim_middle>nat;\nfunction bool",
        "gold": "(b2 bbool) => bbool",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype tree = { kind: \"Leaf\" } | { kind: \"Node\"; f0: nat; f1: tree; f2: tree };\ntype bbool = { kind: \"True\" } | { kind: \"False\" };\ntype cmp = { kind: \"LT\" } | { kind: \"EQ\" } | { kind: \"GT\" };\n\nfunction compare(x1: nat): (x2: nat) => cmp {\n  return function (x2: nat) {\n    switch (x1.kind) {\n      case \"Z\": {\n        switch (x2.kind) {\n          case \"Z\": {\n            return { kind: \"EQ\" };\n          }\n          case \"S\": {\n            let n1 = x2.f0;\n            return { kind: \"LT\" };\n          }\n        }\n      }\n      case \"S\": {\n        let n1 = x1.f0;\n        switch (x2.kind) {\n          case \"Z\": {\n            return { kind: \"GT\" };\n          }\n          case \"S\": {\n            let n2 = x2.f0;\n            return compare(n1)(n2);\n          }\n        }\n      }\n    }\n  };\n}\nfunction max(n1: nat): (n2: nat) => nat {\n  return function (n2: nat) {\n    switch (compare(n1)(n2).kind) {\n      case \"LT\": {\n        return n2;\n      }\n      case \"EQ\": {\n        return n1;\n      }\n      case \"GT\": {\n        return n1;\n      }\n    }\n  };\n}\nfunction height(t: tree): nat {\n  switch (t.kind) {\n    case \"Leaf\": {\n      return { kind: \"Z\" };\n    }\n    case \"Node\": {\n      let rt = t.f2;\n      let lt = t.f1;\n      let v = t.f0;\n      switch (lt.kind) {\n        case \"Leaf\": {\n          return { kind: \"S\", f0: height(rt) };\n        }\n        case \"Node\": {\n          let lrt = lt.f2;\n          let llt = lt.f1;\n          let lv = lt.f0;\n          switch (rt.kind) {\n            case \"Leaf\": {\n              return { kind: \"S\", f0: height(lt) };\n            }\n            case \"Node\": {\n              let rrt = rt.f2;\n              let rlt = rt.f1;\n              let rv = rt.f0;\n              return { kind: \"S\", f0: max(height(lt))(height(rt)) };\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction bool_band(b1: bbool): <FILL> {\n  return function (b2: bbool) {\n    switch (b1.kind) {\n      case \"True\": {\n        return b2;\n      }\n      case \"False\": {\n        return { kind: \"False\" };\n      }\n    }\n  };\n}\n\nfunction tree_balanced(t: tree): bbool {\n  switch (t.kind) {\n    case \"Leaf\": {\n      return { kind: \"True\" };\n    }\n    case \"Node\": {\n      let rt = t.f2;\n      let lt = t.f1;\n      let v = t.f0;\n      let lth: nat = height(lt);\n      let rth: nat = height(rt);\n      switch (compare(lth)(rth).kind) {\n        case \"EQ\": {\n          return bool_band(tree_balanced(lt))(tree_balanced(rt));\n        }\n        case \"LT\": {\n          switch (rth.kind) {\n            case \"Z\": {\n              return { kind: \"False\" };\n            }\n            case \"S\": {\n              let n = rth.f0;\n              switch (compare(lth)(n).kind) {\n                case \"EQ\": {\n                  return bool_band(tree_balanced(lt))(tree_balanced(rt));\n                }\n                case \"LT\": {\n                  return { kind: \"False\" };\n                }\n                case \"GT\": {\n                  return { kind: \"False\" };\n                }\n              }\n            }\n          }\n        }\n        case \"GT\": {\n          switch (lth.kind) {\n            case \"Z\": {\n              return { kind: \"False\" };\n            }\n            case \"S\": {\n              let n = lth.f0;\n              switch (compare(rth)(n).kind) {\n                case \"EQ\": {\n                  return bool_band(tree_balanced(lt))(tree_balanced(rt));\n                }\n                case \"LT\": {\n                  return { kind: \"False\" };\n                }\n                case \"GT\": {\n                  return { kind: \"False\" };\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(tree_balanced({ kind: \"Leaf\" }), { kind: \"True\" });\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Leaf\" },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"True\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"True\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"False\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"True\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: {\n            kind: \"Node\",\n            f0: { kind: \"S\", f0: { kind: \"Z\" } },\n            f1: { kind: \"Leaf\" },\n            f2: { kind: \"Leaf\" },\n          },\n        },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"False\" }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: { kind: \"Leaf\" },\n    }),\n    { kind: \"False\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Leaf\" },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"False\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Node\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"Z\" },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"True\" }\n  );\n  assert.deepEqual(\n    tree_balanced({\n      kind: \"Node\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: {\n        kind: \"Node\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Node\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n        f2: {\n          kind: \"Node\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n          f1: { kind: \"Leaf\" },\n          f2: { kind: \"Leaf\" },\n        },\n      },\n      f2: {\n        kind: \"Node\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Leaf\" },\n        f2: { kind: \"Leaf\" },\n      },\n    }),\n    { kind: \"True\" }\n  );\n}\nvalidations();\n"
    },
    "44": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_6({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>, _uniq_8: _uniq_0): _uniq_1 {\n  switch (_uniq_7.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor5\", f0: _uniq_8, f1: { kind: \"Ctor4\" } };\n    }\n    case \"Ctor5\": {\n      let _uniq_10 = _uniq_7.f1;\n      let _uniq_9 = _uniq_7.f0;\n      return { kind: \"Ctor5\", f0: _uniq_9, f1: _uniq_6(_uniq_10, _uniq_8) };\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }, { kind: \"Ctor2\" }), {\n    kind: \"Ctor5\",\n    f0: { kind: \"Ctor2\" },\n    f1: { kind: \"Ctor4\" },\n  });\n  assert.deepEqual(\n    _uniq_6({ kind: \"Ctor4\" }, { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n      { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n      { kind: \"Ctor2\" }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n        },\n      },\n      { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor2\" },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n      { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor2\" },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      { kind: \"Ctor2\" }\n    ),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n}\nvalidations();\n"
    },
    "45": {
        "old": "nat",
        "new": "<fim_middle>nat<|endoftext|><fim_prefix><fim_suffix>t",
        "gold": "nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction list_rev_tailcall(rem: <FILL>): (acc: nlist) => nlist {\n  return function (acc: nlist) {\n    switch (rem.kind) {\n      case \"Nil\": {\n        return acc;\n      }\n      case \"Cons\": {\n        let xs = rem.f1;\n        let x = rem.f0;\n        return list_rev_tailcall(xs)({ kind: \"Cons\", f0: x, f1: acc });\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(list_rev_tailcall({ kind: \"Nil\" })({ kind: \"Nil\" }), {\n    kind: \"Nil\",\n  });\n  assert.deepEqual(\n    list_rev_tailcall({ kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } })(\n      { kind: \"Nil\" }\n    ),\n    { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_rev_tailcall({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"Nil\" }),\n    { kind: \"Cons\", f0: { kind: \"S\", f0: { kind: \"Z\" } }, f1: { kind: \"Nil\" } }\n  );\n}\nvalidations();\n"
    },
    "46": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1<|endoftext|>",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): _uniq_0 {\n  switch (_uniq_7.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor2\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_9 = _uniq_7.f1;\n      let _uniq_8 = _uniq_7.f0;\n      return { kind: \"Ctor3\", f0: _uniq_6(_uniq_9) };\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }), { kind: \"Ctor2\" });\n  assert.deepEqual(\n    _uniq_6({ kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor3\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "47": {
        "old": "_uniq_3",
        "new": "<fim_middle>_uniq_15",
        "gold": "_uniq_0",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor6\" } | { kind: \"Ctor7\" };\ntype _uniq_2 = { kind: \"Ctor8\" } | { kind: \"Ctor9\" } | { kind: \"Ctor10\" };\ntype _uniq_3 =\n  | { kind: \"Ctor11\" }\n  | { kind: \"Ctor12\"; f0: _uniq_0; f1: _uniq_3; f2: _uniq_3 };\n\nfunction _uniq_13(_uniq_16: _uniq_0, _uniq_17: <FILL>): _uniq_2 {\n  switch (_uniq_16.kind) {\n    case \"Ctor4\": {\n      switch (_uniq_17.kind) {\n        case \"Ctor4\": {\n          return { kind: \"Ctor9\" };\n        }\n        case \"Ctor5\": {\n          let _uniq_18 = _uniq_17.f0;\n          return { kind: \"Ctor8\" };\n        }\n      }\n    }\n    case \"Ctor5\": {\n      let _uniq_19 = _uniq_16.f0;\n      switch (_uniq_17.kind) {\n        case \"Ctor4\": {\n          return { kind: \"Ctor10\" };\n        }\n        case \"Ctor5\": {\n          let _uniq_20 = _uniq_17.f0;\n          return _uniq_13(_uniq_19, _uniq_20);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_14(_uniq_21: _uniq_1, _uniq_22: _uniq_1): _uniq_1 {\n  switch (_uniq_21.kind) {\n    case \"Ctor6\": {\n      return _uniq_22;\n    }\n    case \"Ctor7\": {\n      return { kind: \"Ctor7\" };\n    }\n  }\n}\n\nfunction _uniq_15(_uniq_23: _uniq_0, _uniq_24: _uniq_3): _uniq_1 {\n  switch (_uniq_24.kind) {\n    case \"Ctor11\": {\n      return { kind: \"Ctor6\" };\n    }\n    case \"Ctor12\": {\n      let _uniq_27 = _uniq_24.f2;\n      let _uniq_26 = _uniq_24.f1;\n      let _uniq_25 = _uniq_24.f0;\n      switch (_uniq_13(_uniq_25, _uniq_23).kind) {\n        case \"Ctor9\": {\n          return { kind: \"Ctor7\" };\n        }\n        case \"Ctor8\": {\n          return _uniq_14(\n            _uniq_15(_uniq_23, _uniq_26),\n            _uniq_15(_uniq_23, _uniq_27)\n          );\n        }\n        case \"Ctor10\": {\n          return _uniq_14(\n            _uniq_15(_uniq_23, _uniq_26),\n            _uniq_15(_uniq_23, _uniq_27)\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(\n    _uniq_15({ kind: \"Ctor5\", f0: { kind: \"Ctor4\" } }, { kind: \"Ctor11\" }),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(_uniq_15({ kind: \"Ctor4\" }, { kind: \"Ctor11\" }), {\n    kind: \"Ctor6\",\n  });\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: {\n            kind: \"Ctor12\",\n            f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n            f1: { kind: \"Ctor11\" },\n            f2: { kind: \"Ctor11\" },\n          },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n}\nassertions();\n"
    },
    "48": {
        "old": "_uniq_2",
        "new": "<fim_middle>_uniq_10",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\" };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_1 };\ntype _uniq_2 =\n  | { kind: \"Ctor7\" }\n  | { kind: \"Ctor8\"; f0: _uniq_2; f1: _uniq_0; f2: _uniq_2 };\n\nfunction _uniq_9(_uniq_11: _uniq_1, _uniq_12: _uniq_1): _uniq_1 {\n  switch (_uniq_11.kind) {\n    case \"Ctor5\": {\n      return _uniq_12;\n    }\n    case \"Ctor6\": {\n      let _uniq_13 = _uniq_11.f0;\n      return { kind: \"Ctor6\", f0: _uniq_9(_uniq_13, _uniq_12) };\n    }\n  }\n}\n\nfunction _uniq_10(_uniq_14: _uniq_2, _uniq_15: _uniq_1): <FILL> {\n  switch (_uniq_14.kind) {\n    case \"Ctor7\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor8\": {\n      let _uniq_18 = _uniq_14.f2;\n      let _uniq_17 = _uniq_14.f1;\n      let _uniq_16 = _uniq_14.f0;\n      switch (_uniq_15.kind) {\n        case \"Ctor5\": {\n          return { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } };\n        }\n        case \"Ctor6\": {\n          let _uniq_19 = _uniq_15.f0;\n          return _uniq_9(\n            _uniq_10(_uniq_16, _uniq_19),\n            _uniq_10(_uniq_18, _uniq_19)\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_10({ kind: \"Ctor7\" }, { kind: \"Ctor5\" }), {\n    kind: \"Ctor5\",\n  });\n  assert.deepEqual(\n    _uniq_10({ kind: \"Ctor7\" }, { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      { kind: \"Ctor7\" },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      { kind: \"Ctor7\" },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } },\n      }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor5\" }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } },\n      }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor5\" }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } },\n      }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      { kind: \"Ctor5\" }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } },\n      }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      { kind: \"Ctor5\" }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } },\n      }\n    ),\n    { kind: \"Ctor5\" }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n          f1: { kind: \"Ctor3\" },\n          f2: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor5\" }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n          f1: { kind: \"Ctor3\" },\n          f2: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n          f1: { kind: \"Ctor3\" },\n          f2: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } }\n    ),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } }\n  );\n  assert.deepEqual(\n    _uniq_10(\n      {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n          f1: { kind: \"Ctor3\" },\n          f2: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n        },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor7\" },\n      },\n      {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor6\", f0: { kind: \"Ctor6\", f0: { kind: \"Ctor5\" } } },\n      }\n    ),\n    { kind: \"Ctor5\" }\n  );\n}\nassertions();\n"
    }
}