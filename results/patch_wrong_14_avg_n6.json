{
    "7": {
        "old": "_uniq_1) => _uniq_0,\n  _uniq_11: _uniq_0\n): _uniq_0 {\n  switch (_uniq_9.kind) {\n    case \"Ctor4\": {\n      return _uniq",
        "new": "<fim_middle>_uniq_1 {",
        "gold": "_uniq_0",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(\n  _uniq_9: _uniq_1,\n  _uniq_10: (__x7: _uniq_0, __x8: <FILL>) => _uniq_0,\n  _uniq_11: _uniq_0\n): _uniq_0 {\n  switch (_uniq_9.kind) {\n    case \"Ctor4\": {\n      return _uniq_11;\n    }\n    case \"Ctor5\": {\n      let _uniq_13 = _uniq_9.f1;\n      let _uniq_12 = _uniq_9.f0;\n      return _uniq_6(_uniq_13, _uniq_10, _uniq_10(_uniq_11, _uniq_12));\n    }\n  }\n}\nfunction _uniq_7(_uniq_14: _uniq_0, _uniq_15: _uniq_0): _uniq_0 {\n  switch (_uniq_14.kind) {\n    case \"Ctor2\": {\n      return _uniq_15;\n    }\n    case \"Ctor3\": {\n      let _uniq_16 = _uniq_14.f0;\n      return { kind: \"Ctor3\", f0: _uniq_7(_uniq_16, _uniq_15) };\n    }\n  }\n}\n\nfunction _uniq_8(_uniq_17: _uniq_1): _uniq_0 {\n  return _uniq_6(_uniq_17, _uniq_7, { kind: \"Ctor2\" });\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_8({ kind: \"Ctor4\" }), { kind: \"Ctor2\" });\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_8({ kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_8({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: {\n                  kind: \"Ctor3\",\n                  f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n                },\n              },\n            },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor3\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: {\n              kind: \"Ctor3\",\n              f0: {\n                kind: \"Ctor3\",\n                f0: {\n                  kind: \"Ctor3\",\n                  f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "8": {
        "old": "nat) => nat) {\n    switch (l.kind) {\n      case \"Nil\": {\n        return { kind: \"Nil\" };\n      }\n      case \"Cons\": {\n        let xs = l.f1;\n        let x =",
        "new": "<fim_middle>_uniq_1 |",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction map(l: nlist): (f: (__x4: nat) => nat) => nlist {\n  return function (f: (__x3: <FILL>) => nat) {\n    switch (l.kind) {\n      case \"Nil\": {\n        return { kind: \"Nil\" };\n      }\n      case \"Cons\": {\n        let xs = l.f1;\n        let x = l.f0;\n        return { kind: \"Cons\", f0: f(x), f1: map(xs)(f) };\n      }\n    }\n  };\n}\n\nfunction list_inc(l: nlist): nlist {\n  return map(l)(function (x: nat) {\n    return { kind: \"S\", f0: x };\n  });\n}\n\nfunction assertions() {\n  assert.deepEqual(list_inc({ kind: \"Nil\" }), { kind: \"Nil\" });\n  assert.deepEqual(\n    list_inc({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: { kind: \"Nil\" },\n    }\n  );\n  assert.deepEqual(\n    list_inc({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Nil\" },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_inc({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_inc({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: {\n                kind: \"S\",\n                f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n              },\n            },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n        },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: {\n                kind: \"S\",\n                f0: {\n                  kind: \"S\",\n                  f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n                },\n              },\n            },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_inc({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_inc({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"Z\" } },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_inc({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: {\n            kind: \"Cons\",\n            f0: {\n              kind: \"S\",\n              f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n            },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n          f1: {\n            kind: \"Cons\",\n            f0: {\n              kind: \"S\",\n              f0: {\n                kind: \"S\",\n                f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n              },\n            },\n            f1: { kind: \"Nil\" },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "9": {
        "old": "_uniq_0): _uniq_1 {\n  switch (_uniq_23.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor6\" };\n    }\n    case \"Ctor5\": {\n      let _",
        "new": "<fim_middle>_uniq_11",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor6\" } | { kind: \"Ctor7\" };\ntype _uniq_2 = { kind: \"Ctor8\" } | { kind: \"Ctor9\" } | { kind: \"Ctor10\" };\ntype _uniq_3 =\n  | { kind: \"Ctor11\" }\n  | { kind: \"Ctor12\"; f0: _uniq_0; f1: _uniq_3; f2: _uniq_3 };\n\nfunction _uniq_13(_uniq_16: _uniq_0, _uniq_17: _uniq_0): _uniq_2 {\n  switch (_uniq_16.kind) {\n    case \"Ctor4\": {\n      switch (_uniq_17.kind) {\n        case \"Ctor4\": {\n          return { kind: \"Ctor9\" };\n        }\n        case \"Ctor5\": {\n          let _uniq_18 = _uniq_17.f0;\n          return { kind: \"Ctor8\" };\n        }\n      }\n    }\n    case \"Ctor5\": {\n      let _uniq_19 = _uniq_16.f0;\n      switch (_uniq_17.kind) {\n        case \"Ctor4\": {\n          return { kind: \"Ctor10\" };\n        }\n        case \"Ctor5\": {\n          let _uniq_20 = _uniq_17.f0;\n          return _uniq_13(_uniq_19, _uniq_20);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_14(_uniq_21: _uniq_1, _uniq_22: _uniq_1): _uniq_1 {\n  switch (_uniq_21.kind) {\n    case \"Ctor6\": {\n      return _uniq_22;\n    }\n    case \"Ctor7\": {\n      return { kind: \"Ctor7\" };\n    }\n  }\n}\n\nfunction _uniq_15(_uniq_23: _uniq_0, _uniq_24: <FILL>): _uniq_1 {\n  switch (_uniq_24.kind) {\n    case \"Ctor11\": {\n      return { kind: \"Ctor6\" };\n    }\n    case \"Ctor12\": {\n      let _uniq_27 = _uniq_24.f2;\n      let _uniq_26 = _uniq_24.f1;\n      let _uniq_25 = _uniq_24.f0;\n      switch (_uniq_13(_uniq_25, _uniq_23).kind) {\n        case \"Ctor9\": {\n          return { kind: \"Ctor7\" };\n        }\n        case \"Ctor8\": {\n          return _uniq_14(\n            _uniq_15(_uniq_23, _uniq_26),\n            _uniq_15(_uniq_23, _uniq_27)\n          );\n        }\n        case \"Ctor10\": {\n          return _uniq_14(\n            _uniq_15(_uniq_23, _uniq_26),\n            _uniq_15(_uniq_23, _uniq_27)\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(\n    _uniq_15({ kind: \"Ctor5\", f0: { kind: \"Ctor4\" } }, { kind: \"Ctor11\" }),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(_uniq_15({ kind: \"Ctor4\" }, { kind: \"Ctor11\" }), {\n    kind: \"Ctor6\",\n  });\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: {\n            kind: \"Ctor12\",\n            f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n            f1: { kind: \"Ctor11\" },\n            f2: { kind: \"Ctor11\" },\n          },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n}\nassertions();\n"
    },
    "10": {
        "old": "_uniq_1): _uniq_2 {\n  switch (_uniq_35.kind) {\n    case \"Ctor6\": {\n      return { kind: \"Ctor8\" };\n    }\n    case \"Ctor7\": {\n      let _",
        "new": "<fim_middle>_uniq_6({",
        "gold": "(_uniq_9 (__x4 _uniq_0) => _uniq_0) => _uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0 };\ntype _uniq_1 =\n  | { kind: \"Ctor6\" }\n  | { kind: \"Ctor7\"; f0: _uniq_0; f1: _uniq_1; f2: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor8\" } | { kind: \"Ctor9\" };\ntype _uniq_3 = { kind: \"Ctor10\" } | { kind: \"Ctor11\" } | { kind: \"Ctor12\" };\n\nfunction _uniq_13(_uniq_18: _uniq_0): (_uniq_19: _uniq_0) => _uniq_3 {\n  return function (_uniq_19: _uniq_0) {\n    switch (_uniq_18.kind) {\n      case \"Ctor4\": {\n        switch (_uniq_19.kind) {\n          case \"Ctor4\": {\n            return { kind: \"Ctor11\" };\n          }\n          case \"Ctor5\": {\n            let _uniq_20 = _uniq_19.f0;\n            return { kind: \"Ctor10\" };\n          }\n        }\n      }\n      case \"Ctor5\": {\n        let _uniq_21 = _uniq_18.f0;\n        switch (_uniq_19.kind) {\n          case \"Ctor4\": {\n            return { kind: \"Ctor12\" };\n          }\n          case \"Ctor5\": {\n            let _uniq_22 = _uniq_19.f0;\n            return _uniq_13(_uniq_21)(_uniq_22);\n          }\n        }\n      }\n    }\n  };\n}\nfunction _uniq_14(_uniq_23: _uniq_0): (_uniq_24: _uniq_0) => _uniq_0 {\n  return function (_uniq_24: _uniq_0) {\n    switch (_uniq_13(_uniq_23)(_uniq_24).kind) {\n      case \"Ctor10\": {\n        return _uniq_24;\n      }\n      case \"Ctor11\": {\n        return _uniq_23;\n      }\n      case \"Ctor12\": {\n        return _uniq_23;\n      }\n    }\n  };\n}\nfunction _uniq_15(_uniq_25: _uniq_1): _uniq_0 {\n  switch (_uniq_25.kind) {\n    case \"Ctor6\": {\n      return { kind: \"Ctor4\" };\n    }\n    case \"Ctor7\": {\n      let _uniq_28 = _uniq_25.f2;\n      let _uniq_27 = _uniq_25.f1;\n      let _uniq_26 = _uniq_25.f0;\n      switch (_uniq_27.kind) {\n        case \"Ctor6\": {\n          return { kind: \"Ctor5\", f0: _uniq_15(_uniq_28) };\n        }\n        case \"Ctor7\": {\n          let _uniq_31 = _uniq_27.f2;\n          let _uniq_30 = _uniq_27.f1;\n          let _uniq_29 = _uniq_27.f0;\n          switch (_uniq_28.kind) {\n            case \"Ctor6\": {\n              return { kind: \"Ctor5\", f0: _uniq_15(_uniq_27) };\n            }\n            case \"Ctor7\": {\n              let _uniq_34 = _uniq_28.f2;\n              let _uniq_33 = _uniq_28.f1;\n              let _uniq_32 = _uniq_28.f0;\n              return {\n                kind: \"Ctor5\",\n                f0: _uniq_14(_uniq_15(_uniq_27))(_uniq_15(_uniq_28)),\n              };\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction _uniq_16(_uniq_35: <FILL>): (_uniq_36: _uniq_2) => _uniq_2 {\n  return function (_uniq_36: _uniq_2) {\n    switch (_uniq_35.kind) {\n      case \"Ctor8\": {\n        return _uniq_36;\n      }\n      case \"Ctor9\": {\n        return { kind: \"Ctor9\" };\n      }\n    }\n  };\n}\n\nfunction _uniq_17(_uniq_37: _uniq_1): _uniq_2 {\n  switch (_uniq_37.kind) {\n    case \"Ctor6\": {\n      return { kind: \"Ctor8\" };\n    }\n    case \"Ctor7\": {\n      let _uniq_40 = _uniq_37.f2;\n      let _uniq_39 = _uniq_37.f1;\n      let _uniq_38 = _uniq_37.f0;\n      let _uniq_41: _uniq_0 = _uniq_15(_uniq_39);\n      let _uniq_42: _uniq_0 = _uniq_15(_uniq_40);\n      switch (_uniq_13(_uniq_41)(_uniq_42).kind) {\n        case \"Ctor11\": {\n          return _uniq_16(_uniq_17(_uniq_39))(_uniq_17(_uniq_40));\n        }\n        case \"Ctor10\": {\n          switch (_uniq_42.kind) {\n            case \"Ctor4\": {\n              return { kind: \"Ctor9\" };\n            }\n            case \"Ctor5\": {\n              let _uniq_43 = _uniq_42.f0;\n              switch (_uniq_13(_uniq_41)(_uniq_43).kind) {\n                case \"Ctor11\": {\n                  return _uniq_16(_uniq_17(_uniq_39))(_uniq_17(_uniq_40));\n                }\n                case \"Ctor10\": {\n                  return { kind: \"Ctor9\" };\n                }\n                case \"Ctor12\": {\n                  return { kind: \"Ctor9\" };\n                }\n              }\n            }\n          }\n        }\n        case \"Ctor12\": {\n          switch (_uniq_41.kind) {\n            case \"Ctor4\": {\n              return { kind: \"Ctor9\" };\n            }\n            case \"Ctor5\": {\n              let _uniq_44 = _uniq_41.f0;\n              switch (_uniq_13(_uniq_42)(_uniq_44).kind) {\n                case \"Ctor11\": {\n                  return _uniq_16(_uniq_17(_uniq_39))(_uniq_17(_uniq_40));\n                }\n                case \"Ctor10\": {\n                  return { kind: \"Ctor9\" };\n                }\n                case \"Ctor12\": {\n                  return { kind: \"Ctor9\" };\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_17({ kind: \"Ctor6\" }), { kind: \"Ctor8\" });\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\" },\n      f1: { kind: \"Ctor6\" },\n      f2: { kind: \"Ctor6\" },\n    }),\n    { kind: \"Ctor8\" }\n  );\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\" },\n      f1: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor6\" },\n      },\n      f2: { kind: \"Ctor6\" },\n    }),\n    { kind: \"Ctor8\" }\n  );\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\" },\n      f1: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor6\" },\n        },\n        f2: { kind: \"Ctor6\" },\n      },\n      f2: { kind: \"Ctor6\" },\n    }),\n    { kind: \"Ctor9\" }\n  );\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\" },\n      f1: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor6\" },\n        },\n        f2: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor6\" },\n        },\n      },\n      f2: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor6\" },\n      },\n    }),\n    { kind: \"Ctor8\" }\n  );\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\" },\n      f1: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor6\" },\n        },\n        f2: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor6\" },\n          f2: {\n            kind: \"Ctor7\",\n            f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n            f1: { kind: \"Ctor6\" },\n            f2: { kind: \"Ctor6\" },\n          },\n        },\n      },\n      f2: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor6\" },\n      },\n    }),\n    { kind: \"Ctor9\" }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\" },\n      f1: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor6\" },\n        },\n        f2: { kind: \"Ctor6\" },\n      },\n      f2: { kind: \"Ctor6\" },\n    }),\n    { kind: \"Ctor9\" }\n  );\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor4\" },\n      f1: { kind: \"Ctor6\" },\n      f2: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor6\" },\n        },\n        f2: { kind: \"Ctor6\" },\n      },\n    }),\n    { kind: \"Ctor9\" }\n  );\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      f1: {\n        kind: \"Ctor7\",\n        f0: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n        },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor6\" },\n      },\n      f2: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor6\" },\n      },\n    }),\n    { kind: \"Ctor8\" }\n  );\n  assert.deepEqual(\n    _uniq_17({\n      kind: \"Ctor7\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      },\n      f1: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor7\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor6\" },\n        },\n        f2: {\n          kind: \"Ctor7\",\n          f0: {\n            kind: \"Ctor5\",\n            f0: {\n              kind: \"Ctor5\",\n              f0: {\n                kind: \"Ctor5\",\n                f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n              },\n            },\n          },\n          f1: { kind: \"Ctor6\" },\n          f2: { kind: \"Ctor6\" },\n        },\n      },\n      f2: {\n        kind: \"Ctor7\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor6\" },\n        f2: { kind: \"Ctor6\" },\n      },\n    }),\n    { kind: \"Ctor8\" }\n  );\n}\nvalidations();\n"
    },
    "11": {
        "old": "_uniq_1): _uniq_2 {\n  switch (_uniq_14.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor6\": {\n      return {",
        "new": "<fim_middle>nat; x1:",
        "gold": "nat",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\" };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\"; f0: _uniq_0; f1: _uniq_2 };\n\nfunction _uniq_9(_uniq_11: _uniq_0): _uniq_1 {\n  switch (_uniq_11.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_12 = _uniq_11.f0;\n      switch (_uniq_12.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor6\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_13 = _uniq_12.f0;\n          return _uniq_9(_uniq_13);\n        }\n      }\n    }\n  }\n}\n\nfunction _uniq_10(_uniq_14: <FILL>): _uniq_2 {\n  switch (_uniq_14.kind) {\n    case \"Ctor7\": {\n      return { kind: \"Ctor7\" };\n    }\n    case \"Ctor8\": {\n      let _uniq_16 = _uniq_14.f1;\n      let _uniq_15 = _uniq_14.f0;\n      switch (_uniq_9(_uniq_15).kind) {\n        case \"Ctor5\": {\n          return _uniq_10(_uniq_16);\n        }\n        case \"Ctor6\": {\n          return { kind: \"Ctor8\", f0: _uniq_15, f1: _uniq_10(_uniq_16) };\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_10({ kind: \"Ctor7\" }), { kind: \"Ctor7\" });\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: { kind: \"Ctor7\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor7\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n        f1: { kind: \"Ctor7\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n        f1: { kind: \"Ctor7\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n        f1: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                    },\n                  },\n                },\n              },\n            },\n          },\n          f1: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                  },\n                },\n              },\n            },\n          },\n        },\n        f1: { kind: \"Ctor7\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: { kind: \"Ctor7\" },\n    }),\n    { kind: \"Ctor7\" }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor7\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: { kind: \"Ctor7\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: { kind: \"Ctor7\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: { kind: \"Ctor7\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: { kind: \"Ctor7\" },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: {\n            kind: \"Ctor8\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n            f1: { kind: \"Ctor7\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f1: { kind: \"Ctor7\" },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "12": {
        "old": "(x: _uniq_0) => _uniq_1,\n  _uniq_16: _uniq_0\n): _uniq_1 {\n  switch (_uniq_16.kind) {\n    case \"Ctor3\": {",
        "new": "<fim_middle>_uniq_1 {",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\" };\n\nfunction _uniq_9(_uniq_12: _uniq_0): _uniq_2 {\n  switch (_uniq_12.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor7\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_13 = _uniq_12.f0;\n      switch (_uniq_13.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor8\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_14 = _uniq_13.f0;\n          return _uniq_9(_uniq_14);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_10(_uniq_15: _uniq_0): _uniq_2 {\n  switch (_uniq_15.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor8\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_16 = _uniq_15.f0;\n      return { kind: \"Ctor7\" };\n    }\n  }\n}\n\nfunction _uniq_11(\n  _uniq_17: <FILL>,\n  _uniq_18: _uniq_1\n): _uniq_1 {\n  switch (_uniq_18.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor5\" };\n    }\n    case \"Ctor6\": {\n      let _uniq_20 = _uniq_18.f1;\n      let _uniq_19 = _uniq_18.f0;\n      switch (_uniq_17(_uniq_19).kind) {\n        case \"Ctor7\": {\n          return {\n            kind: \"Ctor6\",\n            f0: _uniq_19,\n            f1: _uniq_11(_uniq_17, _uniq_20),\n          };\n        }\n        case \"Ctor8\": {\n          return _uniq_11(_uniq_17, _uniq_20);\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_11(_uniq_9, { kind: \"Ctor5\" }), { kind: \"Ctor5\" });\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: { kind: \"Ctor5\" },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor3\" },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    { kind: \"Ctor6\", f0: { kind: \"Ctor3\" }, f1: { kind: \"Ctor5\" } }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_10, {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: { kind: \"Ctor5\" },\n    }),\n    { kind: \"Ctor5\" }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: { kind: \"Ctor5\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: { kind: \"Ctor5\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_10, {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor3\" },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n          f1: { kind: \"Ctor5\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_10, {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f1: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f1: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n          f1: {\n            kind: \"Ctor6\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f1: { kind: \"Ctor5\" },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "13": {
        "old": "nlist, l2: nlist",
        "new": "<fim_middle>_uniq_6({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction list_append(l1: <FILL>): (l2: nlist) => nlist {\n  return function (l2: nlist) {\n    switch (l1.kind) {\n      case \"Nil\": {\n        return l2;\n      }\n      case \"Cons\": {\n        let xs = l1.f1;\n        let x = l1.f0;\n        return { kind: \"Cons\", f0: x, f1: list_append(xs)(l2) };\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(list_append({ kind: \"Nil\" })({ kind: \"Nil\" }), {\n    kind: \"Nil\",\n  });\n  assert.deepEqual(\n    list_append({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n  assert.deepEqual(\n    list_append({ kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } })({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Nil\" },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n  assert.deepEqual(\n    list_append({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    })({ kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_append({ kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } })({\n      kind: \"Nil\",\n    }),\n    { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    list_append({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    })({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_append({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    })({ kind: \"Nil\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n}\nvalidations();\n"
    }
}