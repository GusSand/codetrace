{
    "40": {
        "old": "_uniq_1",
        "new": "<fim_middle>nat<|endoftext|><fim_prefix><fim_suffix>t",
        "gold": "nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\n\nfunction list_stutter(lox: <FILL>): nlist {\n  switch (lox.kind) {\n    case \"Nil\": {\n      return { kind: \"Nil\" };\n    }\n    case \"Cons\": {\n      let xs = lox.f1;\n      let x = lox.f0;\n      return {\n        kind: \"Cons\",\n        f0: x,\n        f1: { kind: \"Cons\", f0: x, f1: list_stutter(xs) },\n      };\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(list_stutter({ kind: \"Nil\" }), { kind: \"Nil\" });\n  assert.deepEqual(\n    list_stutter({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"Z\" },\n          f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_stutter({ kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n    }\n  );\n  assert.deepEqual(\n    list_stutter({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"Z\" },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"Z\" } },\n          f1: {\n            kind: \"Cons\",\n            f0: { kind: \"S\", f0: { kind: \"Z\" } },\n            f1: {\n              kind: \"Cons\",\n              f0: { kind: \"Z\" },\n              f1: { kind: \"Cons\", f0: { kind: \"Z\" }, f1: { kind: \"Nil\" } },\n            },\n          },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "7": {
        "old": "_uniq_1",
        "new": "<fim_middle>nat;\nfunction main",
        "gold": "(n nat) => nlist",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype nat = { kind: \"Z\" } | { kind: \"S\"; f0: nat };\ntype nlist = { kind: \"Nil\" } | { kind: \"Cons\"; f0: nat; f1: nlist };\ntype cmp = { kind: \"LT\" } | { kind: \"EQ\" } | { kind: \"GT\" };\n\nfunction compare(n1: nat): (n2: nat) => cmp {\n  return function (n2: nat) {\n    switch (n1.kind) {\n      case \"Z\": {\n        switch (n2.kind) {\n          case \"Z\": {\n            return { kind: \"EQ\" };\n          }\n          case \"S\": {\n            let m = n2.f0;\n            return { kind: \"LT\" };\n          }\n        }\n      }\n      case \"S\": {\n        let m1 = n1.f0;\n        switch (n2.kind) {\n          case \"Z\": {\n            return { kind: \"GT\" };\n          }\n          case \"S\": {\n            let m2 = n2.f0;\n            return compare(m1)(m2);\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction list_sorted_insert(l: nlist): <FILL> {\n  return function (n: nat) {\n    switch (l.kind) {\n      case \"Nil\": {\n        return { kind: \"Cons\", f0: n, f1: { kind: \"Nil\" } };\n      }\n      case \"Cons\": {\n        let tl = l.f1;\n        let m = l.f0;\n        switch (compare(n)(m).kind) {\n          case \"LT\": {\n            return { kind: \"Cons\", f0: n, f1: { kind: \"Cons\", f0: m, f1: tl } };\n          }\n          case \"EQ\": {\n            return l;\n          }\n          case \"GT\": {\n            return { kind: \"Cons\", f0: m, f1: list_sorted_insert(tl)(n) };\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(list_sorted_insert({ kind: \"Nil\" })({ kind: \"Z\" }), {\n    kind: \"Cons\",\n    f0: { kind: \"Z\" },\n    f1: { kind: \"Nil\" },\n  });\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"S\", f0: { kind: \"Z\" } }),\n    { kind: \"Cons\", f0: { kind: \"S\", f0: { kind: \"Z\" } }, f1: { kind: \"Nil\" } }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"Z\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"S\", f0: { kind: \"Z\" } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"S\", f0: { kind: \"Z\" } },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    })({ kind: \"Z\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: { kind: \"Nil\" },\n      },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"Z\" } },\n        f1: {\n          kind: \"Cons\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"Z\" }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: { kind: \"Nil\" },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } } }),\n    {\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: { kind: \"Nil\" },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: { kind: \"Nil\" },\n    })({\n      kind: \"S\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n    }),\n    {\n      kind: \"Cons\",\n      f0: {\n        kind: \"S\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n      },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n        },\n        f1: { kind: \"Nil\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    list_sorted_insert({\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: {\n          kind: \"S\",\n          f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        },\n        f1: { kind: \"Nil\" },\n      },\n    })({ kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } }),\n    {\n      kind: \"Cons\",\n      f0: { kind: \"Z\" },\n      f1: {\n        kind: \"Cons\",\n        f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n        f1: {\n          kind: \"Cons\",\n          f0: {\n            kind: \"S\",\n            f0: { kind: \"S\", f0: { kind: \"S\", f0: { kind: \"Z\" } } },\n          },\n          f1: { kind: \"Nil\" },\n        },\n      },\n    }\n  );\n}\nvalidations();\n"
    },
    "1": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_1 |",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\" };\ntype _uniq_1 =\n  | { kind: \"Ctor5\" }\n  | { kind: \"Ctor6\"; f0: _uniq_1; f1: _uniq_0; f2: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor7\" } | { kind: \"Ctor8\"; f0: _uniq_2 };\n\nfunction _uniq_9(_uniq_11: <FILL>): (_uniq_12: _uniq_2) => _uniq_2 {\n  return function (_uniq_12: _uniq_2) {\n    switch (_uniq_11.kind) {\n      case \"Ctor7\": {\n        return _uniq_12;\n      }\n      case \"Ctor8\": {\n        let _uniq_13 = _uniq_11.f0;\n        return { kind: \"Ctor8\", f0: _uniq_9(_uniq_13)(_uniq_12) };\n      }\n    }\n  };\n}\n\nfunction _uniq_10(_uniq_14: _uniq_1): _uniq_2 {\n  switch (_uniq_14.kind) {\n    case \"Ctor5\": {\n      return { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } };\n    }\n    case \"Ctor6\": {\n      let _uniq_17 = _uniq_14.f2;\n      let _uniq_16 = _uniq_14.f1;\n      let _uniq_15 = _uniq_14.f0;\n      return _uniq_9(_uniq_10(_uniq_15))(_uniq_10(_uniq_17));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_10({ kind: \"Ctor5\" }), {\n    kind: \"Ctor8\",\n    f0: { kind: \"Ctor7\" },\n  });\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor5\" },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: { kind: \"Ctor5\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor5\" },\n      },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor3\" },\n        f2: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } },\n      },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor5\" },\n      f1: { kind: \"Ctor3\" },\n      f2: { kind: \"Ctor5\" },\n    }),\n    { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor6\",\n        f0: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor5\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor5\" },\n        },\n        f1: { kind: \"Ctor4\" },\n        f2: { kind: \"Ctor5\" },\n      },\n      f1: { kind: \"Ctor4\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor4\" },\n        f2: {\n          kind: \"Ctor6\",\n          f0: { kind: \"Ctor5\" },\n          f1: { kind: \"Ctor4\" },\n          f2: { kind: \"Ctor5\" },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_10({\n      kind: \"Ctor6\",\n      f0: { kind: \"Ctor5\" },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor6\",\n        f0: { kind: \"Ctor5\" },\n        f1: { kind: \"Ctor4\" },\n        f2: { kind: \"Ctor5\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor8\", f0: { kind: \"Ctor8\", f0: { kind: \"Ctor7\" } } },\n    }\n  );\n}\nvalidations();\n"
    },
    "47": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_15",
        "gold": "_uniq_0",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor6\" } | { kind: \"Ctor7\" };\ntype _uniq_2 = { kind: \"Ctor8\" } | { kind: \"Ctor9\" } | { kind: \"Ctor10\" };\ntype _uniq_3 =\n  | { kind: \"Ctor11\" }\n  | { kind: \"Ctor12\"; f0: _uniq_0; f1: _uniq_3; f2: _uniq_3 };\n\nfunction _uniq_13(_uniq_16: _uniq_0, _uniq_17: <FILL>): _uniq_2 {\n  switch (_uniq_16.kind) {\n    case \"Ctor4\": {\n      switch (_uniq_17.kind) {\n        case \"Ctor4\": {\n          return { kind: \"Ctor9\" };\n        }\n        case \"Ctor5\": {\n          let _uniq_18 = _uniq_17.f0;\n          return { kind: \"Ctor8\" };\n        }\n      }\n    }\n    case \"Ctor5\": {\n      let _uniq_19 = _uniq_16.f0;\n      switch (_uniq_17.kind) {\n        case \"Ctor4\": {\n          return { kind: \"Ctor10\" };\n        }\n        case \"Ctor5\": {\n          let _uniq_20 = _uniq_17.f0;\n          return _uniq_13(_uniq_19, _uniq_20);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_14(_uniq_21: _uniq_1, _uniq_22: _uniq_1): _uniq_1 {\n  switch (_uniq_21.kind) {\n    case \"Ctor6\": {\n      return _uniq_22;\n    }\n    case \"Ctor7\": {\n      return { kind: \"Ctor7\" };\n    }\n  }\n}\n\nfunction _uniq_15(_uniq_23: _uniq_0, _uniq_24: _uniq_3): _uniq_1 {\n  switch (_uniq_24.kind) {\n    case \"Ctor11\": {\n      return { kind: \"Ctor6\" };\n    }\n    case \"Ctor12\": {\n      let _uniq_27 = _uniq_24.f2;\n      let _uniq_26 = _uniq_24.f1;\n      let _uniq_25 = _uniq_24.f0;\n      switch (_uniq_13(_uniq_25, _uniq_23).kind) {\n        case \"Ctor9\": {\n          return { kind: \"Ctor7\" };\n        }\n        case \"Ctor8\": {\n          return _uniq_14(\n            _uniq_15(_uniq_23, _uniq_26),\n            _uniq_15(_uniq_23, _uniq_27)\n          );\n        }\n        case \"Ctor10\": {\n          return _uniq_14(\n            _uniq_15(_uniq_23, _uniq_26),\n            _uniq_15(_uniq_23, _uniq_27)\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(\n    _uniq_15({ kind: \"Ctor5\", f0: { kind: \"Ctor4\" } }, { kind: \"Ctor11\" }),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(_uniq_15({ kind: \"Ctor4\" }, { kind: \"Ctor11\" }), {\n    kind: \"Ctor6\",\n  });\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor11\" },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor4\" },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor4\" },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: { kind: \"Ctor11\" },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n          f1: { kind: \"Ctor11\" },\n          f2: { kind: \"Ctor11\" },\n        },\n      }\n    ),\n    { kind: \"Ctor7\" }\n  );\n  assert.deepEqual(\n    _uniq_15(\n      {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n      },\n      {\n        kind: \"Ctor12\",\n        f0: { kind: \"Ctor4\" },\n        f1: {\n          kind: \"Ctor12\",\n          f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } },\n          f1: {\n            kind: \"Ctor12\",\n            f0: { kind: \"Ctor5\", f0: { kind: \"Ctor5\", f0: { kind: \"Ctor4\" } } },\n            f1: { kind: \"Ctor11\" },\n            f2: { kind: \"Ctor11\" },\n          },\n          f2: { kind: \"Ctor11\" },\n        },\n        f2: { kind: \"Ctor11\" },\n      }\n    ),\n    { kind: \"Ctor6\" }\n  );\n}\nassertions();\n"
    },
    "17": {
        "old": "nat",
        "new": "<fim_middle>_uniq_11",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor5\" } | { kind: \"Ctor6\"; f0: _uniq_0; f1: _uniq_1 };\ntype _uniq_2 =\n  | { kind: \"Ctor7\" }\n  | { kind: \"Ctor8\"; f0: _uniq_2; f1: _uniq_0; f2: _uniq_2 };\n\nfunction _uniq_9(_uniq_12: _uniq_0): _uniq_0 {\n  switch (_uniq_12.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_13 = _uniq_12.f0;\n      switch (_uniq_13.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor3\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_14 = _uniq_13.f0;\n          return { kind: \"Ctor4\", f0: _uniq_9(_uniq_14) };\n        }\n      }\n    }\n  }\n}\nfunction _uniq_10(_uniq_15: _uniq_0): _uniq_0 {\n  return { kind: \"Ctor4\", f0: _uniq_15 };\n}\n\nfunction _uniq_11(\n  _uniq_16: (__x9: _uniq_0) => _uniq_0,\n  _uniq_17: <FILL>\n): _uniq_2 {\n  switch (_uniq_17.kind) {\n    case \"Ctor7\": {\n      return { kind: \"Ctor7\" };\n    }\n    case \"Ctor8\": {\n      let _uniq_20 = _uniq_17.f2;\n      let _uniq_19 = _uniq_17.f1;\n      let _uniq_18 = _uniq_17.f0;\n      return {\n        kind: \"Ctor8\",\n        f0: _uniq_11(_uniq_16, _uniq_18),\n        f1: _uniq_16(_uniq_19),\n        f2: _uniq_11(_uniq_16, _uniq_20),\n      };\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_11(_uniq_9, { kind: \"Ctor7\" }), { kind: \"Ctor7\" });\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: { kind: \"Ctor7\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_9, {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: { kind: \"Ctor7\" },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(_uniq_10, {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor3\" },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n      f2: { kind: \"Ctor7\" },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_11(_uniq_10, {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      f2: { kind: \"Ctor7\" },\n    }),\n    {\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f2: { kind: \"Ctor7\" },\n      },\n      f1: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f2: { kind: \"Ctor7\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      function (_uniq_21: _uniq_0) {\n        switch (_uniq_21.kind) {\n          case \"Ctor3\": {\n            return { kind: \"Ctor3\" };\n          }\n          case \"Ctor4\": {\n            let _uniq_22 = _uniq_21.f0;\n            return _uniq_22;\n          }\n        }\n      },\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor3\" },\n            f2: { kind: \"Ctor7\" },\n          },\n          f1: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          f2: {\n            kind: \"Ctor8\",\n            f0: { kind: \"Ctor7\" },\n            f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n            f2: { kind: \"Ctor7\" },\n          },\n        },\n      }\n    ),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: { kind: \"Ctor3\" },\n      f2: {\n        kind: \"Ctor8\",\n        f0: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n        f1: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n        f2: {\n          kind: \"Ctor8\",\n          f0: { kind: \"Ctor7\" },\n          f1: { kind: \"Ctor3\" },\n          f2: { kind: \"Ctor7\" },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_11(\n      function (_uniq_23: _uniq_0) {\n        return _uniq_23;\n      },\n      {\n        kind: \"Ctor8\",\n        f0: { kind: \"Ctor7\" },\n        f1: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n        f2: { kind: \"Ctor7\" },\n      }\n    ),\n    {\n      kind: \"Ctor8\",\n      f0: { kind: \"Ctor7\" },\n      f1: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f2: { kind: \"Ctor7\" },\n    }\n  );\n}\nvalidations();\n"
    },
    "15": {
        "old": "_uniq_1",
        "new": "<fim_middle>_uniq_18",
        "gold": "_uniq_2",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor3\" } | { kind: \"Ctor4\"; f0: _uniq_0 };\ntype _uniq_1 =\n  | { kind: \"Ctor5\"; f0: _uniq_0 }\n  | { kind: \"Ctor6\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor7\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor8\"; f0: _uniq_1; f1: _uniq_1 }\n  | { kind: \"Ctor9\"; f0: _uniq_1; f1: _uniq_1 };\ntype _uniq_2 = { kind: \"Ctor10\" } | { kind: \"Ctor11\" } | { kind: \"Ctor12\" };\n\nfunction _uniq_13(_uniq_19: _uniq_0, _uniq_20: _uniq_0): <FILL> {\n  switch (_uniq_19.kind) {\n    case \"Ctor3\": {\n      switch (_uniq_20.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor11\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_21 = _uniq_20.f0;\n          return { kind: \"Ctor10\" };\n        }\n      }\n    }\n    case \"Ctor4\": {\n      let _uniq_22 = _uniq_19.f0;\n      switch (_uniq_20.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor12\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_23 = _uniq_20.f0;\n          return _uniq_13(_uniq_22, _uniq_23);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_14(_uniq_24: _uniq_0, _uniq_25: _uniq_0): _uniq_0 {\n  switch (_uniq_24.kind) {\n    case \"Ctor3\": {\n      return _uniq_25;\n    }\n    case \"Ctor4\": {\n      let _uniq_26 = _uniq_24.f0;\n      return { kind: \"Ctor4\", f0: _uniq_14(_uniq_26, _uniq_25) };\n    }\n  }\n}\nfunction _uniq_15(_uniq_27: _uniq_0, _uniq_28: _uniq_0): _uniq_0 {\n  switch (_uniq_27.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_29 = _uniq_27.f0;\n      switch (_uniq_28.kind) {\n        case \"Ctor3\": {\n          return _uniq_27;\n        }\n        case \"Ctor4\": {\n          let _uniq_30 = _uniq_28.f0;\n          return _uniq_15(_uniq_29, _uniq_30);\n        }\n      }\n    }\n  }\n}\nfunction _uniq_16(_uniq_31: _uniq_0, _uniq_32: _uniq_0): _uniq_0 {\n  switch (_uniq_31.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_33 = _uniq_31.f0;\n      return _uniq_14(_uniq_32, _uniq_16(_uniq_33, _uniq_32));\n    }\n  }\n}\nfunction _uniq_17(_uniq_34: _uniq_0, _uniq_35: _uniq_0): _uniq_0 {\n  switch (_uniq_35.kind) {\n    case \"Ctor3\": {\n      return { kind: \"Ctor3\" };\n    }\n    case \"Ctor4\": {\n      let _uniq_36 = _uniq_35.f0;\n      switch (_uniq_34.kind) {\n        case \"Ctor3\": {\n          return { kind: \"Ctor3\" };\n        }\n        case \"Ctor4\": {\n          let _uniq_37 = _uniq_34.f0;\n          switch (_uniq_13(_uniq_34, _uniq_35).kind) {\n            case \"Ctor10\": {\n              return { kind: \"Ctor3\" };\n            }\n            case \"Ctor11\": {\n              return { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } };\n            }\n            case \"Ctor12\": {\n              return {\n                kind: \"Ctor4\",\n                f0: _uniq_17(_uniq_15(_uniq_34, _uniq_35), _uniq_35),\n              };\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction _uniq_18(_uniq_38: _uniq_1): _uniq_0 {\n  switch (_uniq_38.kind) {\n    case \"Ctor5\": {\n      let _uniq_39 = _uniq_38.f0;\n      return _uniq_39;\n    }\n    case \"Ctor6\": {\n      let _uniq_41 = _uniq_38.f1;\n      let _uniq_40 = _uniq_38.f0;\n      return _uniq_14(_uniq_18(_uniq_40), _uniq_18(_uniq_41));\n    }\n    case \"Ctor8\": {\n      let _uniq_43 = _uniq_38.f1;\n      let _uniq_42 = _uniq_38.f0;\n      return _uniq_16(_uniq_18(_uniq_42), _uniq_18(_uniq_43));\n    }\n    case \"Ctor7\": {\n      let _uniq_45 = _uniq_38.f1;\n      let _uniq_44 = _uniq_38.f0;\n      return _uniq_15(_uniq_18(_uniq_44), _uniq_18(_uniq_45));\n    }\n    case \"Ctor9\": {\n      let _uniq_47 = _uniq_38.f1;\n      let _uniq_46 = _uniq_38.f0;\n      return _uniq_17(_uniq_18(_uniq_46), _uniq_18(_uniq_47));\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(\n    _uniq_18({ kind: \"Ctor5\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor7\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor7\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n              },\n            },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor6\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor8\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n    }),\n    {\n      kind: \"Ctor4\",\n      f0: {\n        kind: \"Ctor4\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: {\n              kind: \"Ctor4\",\n              f0: {\n                kind: \"Ctor4\",\n                f0: {\n                  kind: \"Ctor4\",\n                  f0: {\n                    kind: \"Ctor4\",\n                    f0: {\n                      kind: \"Ctor4\",\n                      f0: {\n                        kind: \"Ctor4\",\n                        f0: {\n                          kind: \"Ctor4\",\n                          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_18({\n      kind: \"Ctor9\",\n      f0: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: {\n            kind: \"Ctor4\",\n            f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n          },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor4\",\n          f0: { kind: \"Ctor4\", f0: { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } } },\n        },\n      },\n    }),\n    { kind: \"Ctor4\", f0: { kind: \"Ctor3\" } }\n  );\n}\nvalidations();\n"
    },
    "14": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_6({",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): (_uniq_8: _uniq_0) => _uniq_0 {\n  return function (_uniq_8: _uniq_0) {\n    switch (_uniq_7.kind) {\n      case \"Ctor4\": {\n        return { kind: \"Ctor2\" };\n      }\n      case \"Ctor5\": {\n        let _uniq_10 = _uniq_7.f1;\n        let _uniq_9 = _uniq_7.f0;\n        switch (_uniq_8.kind) {\n          case \"Ctor2\": {\n            return _uniq_9;\n          }\n          case \"Ctor3\": {\n            let _uniq_11 = _uniq_8.f0;\n            return _uniq_6(_uniq_10)(_uniq_11);\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" })({ kind: \"Ctor2\" }), {\n    kind: \"Ctor2\",\n  });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: { kind: \"Ctor4\" },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor2\" }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor2\" }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor2\" }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor2\" }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: {\n            kind: \"Ctor5\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n            f1: { kind: \"Ctor4\" },\n          },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor2\" }),\n    {\n      kind: \"Ctor3\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }),\n    {\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: {\n        kind: \"Ctor3\",\n        f0: {\n          kind: \"Ctor3\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n        },\n      },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: {\n            kind: \"Ctor3\",\n            f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }),\n    { kind: \"Ctor2\" }\n  );\n}\nvalidations();\n"
    },
    "8": {
        "old": "nlist",
        "new": "<fim_middle>_uniq_1<|endoftext|>",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): _uniq_1 {\n  switch (_uniq_7.kind) {\n    case \"Ctor4\": {\n      return { kind: \"Ctor4\" };\n    }\n    case \"Ctor5\": {\n      let _uniq_9 = _uniq_7.f1;\n      let _uniq_8 = _uniq_7.f0;\n      return _uniq_9;\n    }\n  }\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" }), { kind: \"Ctor4\" });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n      },\n    }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    }\n  );\n}\nvalidations();\n"
    },
    "6": {
        "old": "_uniq_0",
        "new": "<fim_middle>_uniq_1 {",
        "gold": "_uniq_1",
        "prompt": "declare var require: any;\nconst assert = require(\"node:assert\");\ntype _uniq_0 = { kind: \"Ctor2\" } | { kind: \"Ctor3\"; f0: _uniq_0 };\ntype _uniq_1 = { kind: \"Ctor4\" } | { kind: \"Ctor5\"; f0: _uniq_0; f1: _uniq_1 };\n\nfunction _uniq_6(_uniq_7: <FILL>): (_uniq_8: _uniq_0) => _uniq_1 {\n  return function (_uniq_8: _uniq_0) {\n    switch (_uniq_8.kind) {\n      case \"Ctor2\": {\n        return _uniq_7;\n      }\n      case \"Ctor3\": {\n        let _uniq_9 = _uniq_8.f0;\n        switch (_uniq_7.kind) {\n          case \"Ctor4\": {\n            return { kind: \"Ctor4\" };\n          }\n          case \"Ctor5\": {\n            let _uniq_11 = _uniq_7.f1;\n            let _uniq_10 = _uniq_7.f0;\n            return _uniq_6(_uniq_11)(_uniq_9);\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction assertions() {\n  assert.deepEqual(_uniq_6({ kind: \"Ctor4\" })({ kind: \"Ctor2\" }), {\n    kind: \"Ctor4\",\n  });\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    })({ kind: \"Ctor2\" }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor4\" }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor2\" } }),\n    { kind: \"Ctor5\", f0: { kind: \"Ctor2\" }, f1: { kind: \"Ctor4\" } }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: { kind: \"Ctor4\" },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }),\n    { kind: \"Ctor4\" }\n  );\n}\nassertions();\n\nfunction validations() {\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({\n      kind: \"Ctor3\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } },\n    }),\n    { kind: \"Ctor4\" }\n  );\n  assert.deepEqual(\n    _uniq_6({\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor2\" },\n      f1: {\n        kind: \"Ctor5\",\n        f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n        f1: {\n          kind: \"Ctor5\",\n          f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n          f1: { kind: \"Ctor4\" },\n        },\n      },\n    })({ kind: \"Ctor3\", f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } } }),\n    {\n      kind: \"Ctor5\",\n      f0: { kind: \"Ctor3\", f0: { kind: \"Ctor2\" } },\n      f1: { kind: \"Ctor4\" },\n    }\n  );\n}\nvalidations();\n"
    }
}