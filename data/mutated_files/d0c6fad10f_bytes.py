from typing import TypeAlias
__typ0 : TypeAlias = "Text"
__typ5 : TypeAlias = "Response"
__typ1 : TypeAlias = "int"
__typ7 : TypeAlias = "DatabaseSchemaEditor"
__typ2 : TypeAlias = "str"
# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-09 05:23

import io
import logging
import os
import urllib
from mimetypes import guess_type
from typing import Dict, Optional, Text, Tuple, Union

import requests
from boto.s3.connection import S3Connection
from boto.s3.key import Key
from django.conf import settings
from django.db import migrations, models
from django.db.backends.postgresql_psycopg2.schema import DatabaseSchemaEditor
from django.db.migrations.state import StateApps
from PIL import Image, ImageOps
from requests import ConnectionError, Response

def __tmp4(s: Union[__typ0, bytes], encoding: __typ0='utf-8') -> __typ2:
    """converts a string to a native string"""
    if isinstance(s, __typ2):
        return s
    elif isinstance(s, __typ0):
        return s.encode(__typ2(encoding))
    elif isinstance(s, bytes):
        return s.decode(encoding)
    else:
        raise TypeError("force_str expects a string type")


class __typ4:
    def __init__(__tmp1) -> None:
        __tmp1.path_template = "{realm_id}/emoji/{emoji_file_name}"
        __tmp1.emoji_size = (64, 64)

    def upload_files(__tmp1, __tmp6, __tmp7: bytes,
                     __tmp10: __typ0) -> None:
        raise NotImplementedError()

    def get_dst_path_id(__tmp1, realm_id: __typ1, url, __tmp2: __typ0) -> Tuple[__typ0, __typ0]:
        _, image_ext = os.path.splitext(url)
        file_name = ''.join((__tmp2, image_ext))
        return file_name, __tmp1.path_template.format(realm_id=realm_id, emoji_file_name=file_name)

    def resize_emoji(__tmp1, __tmp5: bytes) -> Optional[bytes]:
        im = Image.open(io.BytesIO(__tmp5))
        format_ = im.format
        if format_ == 'GIF' and im.is_animated:
            return None
        im = ImageOps.fit(im, __tmp1.emoji_size, Image.ANTIALIAS)
        out = io.BytesIO()
        im.save(out, format_)
        return out.getvalue()

    def upload_emoji(__tmp1, realm_id: __typ1, image_url: __typ0,
                     __tmp2: __typ0) -> Optional[__typ0]:
        file_name, __tmp10 = __tmp1.get_dst_path_id(realm_id, image_url, __tmp2)
        if image_url.startswith("/"):
            # Handle relative URLs.
            image_url = urllib.parse.urljoin(settings.EXTERNAL_HOST, image_url)
        try:
            __tmp6 = requests.get(image_url, stream=True)
        except ConnectionError:
            return None
        if __tmp6.status_code != 200:
            return None
        try:
            __tmp7 = __tmp1.resize_emoji(__tmp6.content)
        except IOError:
            return None
        __tmp1.upload_files(__tmp6, __tmp7, __tmp10)
        return file_name


class __typ3(__typ4):
    def __init__(__tmp1) -> None:
        super().__init__()

    @staticmethod
    def mkdirs(path: __typ0) :
        dirname = os.path.dirname(path)
        if not os.path.isdir(dirname):
            os.makedirs(dirname)

    def write_local_file(__tmp1, path: __typ0, __tmp8) -> None:
        __tmp1.mkdirs(path)
        with open(path, 'wb') as f:
            f.write(__tmp8)

    def upload_files(__tmp1, __tmp6: __typ5, __tmp7: bytes,
                     __tmp10: __typ0) -> None:
        dst_file = os.path.join(settings.LOCAL_UPLOADS_DIR, 'avatars', __tmp10)
        if __tmp7:
            __tmp1.write_local_file(dst_file, __tmp7)
        else:
            __tmp1.write_local_file(dst_file, __tmp6.content)
        __tmp1.write_local_file('.'.join((dst_file, 'original')), __tmp6.content)


class __typ6(__typ4):
    def __init__(__tmp1) -> None:
        super().__init__()
        conn = S3Connection(settings.S3_KEY, settings.S3_SECRET_KEY)
        bucket_name = settings.S3_AVATAR_BUCKET
        __tmp1.bucket = conn.get_bucket(bucket_name, validate=False)

    def upload_to_s3(__tmp1, path: __typ0, __tmp8: <FILL>,
                     headers: Optional[Dict[__typ0, __typ0]]) :
        key = Key(__tmp1.bucket)
        key.key = path
        key.set_contents_from_string(__tmp4(__tmp8), headers=headers)

    def upload_files(__tmp1, __tmp6: __typ5, __tmp7: bytes,
                     __tmp10: __typ0) -> None:
        headers = None  # type: Optional[Dict[Text, Text]]
        content_type = __tmp6.headers.get(__typ2("Content-Type")) or guess_type(__tmp10)[0]
        if content_type:
            headers = {'Content-Type': content_type}
        if __tmp7:
            __tmp1.upload_to_s3(__tmp10, __tmp7, headers)
        else:
            __tmp1.upload_to_s3(__tmp10, __tmp6.content, headers)
        __tmp1.upload_to_s3('.'.join((__tmp10, 'original')), __tmp6.content, headers)

def __tmp11() -> __typ4:
    if settings.LOCAL_UPLOADS_DIR is None:
        return __typ6()
    return __typ3()


def __tmp9(__tmp3: StateApps, __tmp0: __typ7) -> None:
    realm_emoji_model = __tmp3.get_model('zerver', 'RealmEmoji')
    uploader = __tmp11()  # type: Uploader
    for emoji in realm_emoji_model.objects.all():
        file_name = uploader.upload_emoji(emoji.realm_id, emoji.img_url, emoji.name)
        if file_name is None:
            logging.warning("ERROR: Could not download emoji %s; please reupload manually" %
                            (emoji,))
        emoji.file_name = file_name
        emoji.save()


class Migration(migrations.Migration):
    dependencies = [
        ('zerver', '0076_userprofile_emojiset'),
    ]

    operations = [
        migrations.AddField(
            model_name='realmemoji',
            name='file_name',
            field=models.TextField(db_index=True, null=True),
        ),
        migrations.RunPython(__tmp9),
        migrations.RemoveField(
            model_name='realmemoji',
            name='img_url',
        ),
    ]
