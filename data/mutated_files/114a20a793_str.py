from typing import TypeAlias
__typ0 : TypeAlias = "ModuleType"
__typ1 : TypeAlias = "bool"
import re
import sys

from typing import Any, Optional, Tuple, Sequence, MutableSequence, List, MutableMapping, IO
from types import ModuleType


# Type Alias for Signatures
Sig = Tuple[str, str]


def __tmp3(__tmp9: <FILL>) :
    m = re.match(r'([.a-zA-Z0-9_]+)\(([^)]*)\)', __tmp9)
    if not m:
        return None
    __tmp8 = m.group(1)
    __tmp8 = __tmp8.split('.')[-1]
    arg_string = m.group(2)
    if not arg_string.strip():
        return (__tmp8, [], [])
    args = [arg.strip() for arg in arg_string.split(',')]
    fixed = []
    optional = []
    i = 0
    while i < len(args):
        if args[i].startswith('[') or '=' in args[i]:
            break
        fixed.append(args[i].rstrip('['))
        i += 1
        if args[i - 1].endswith('['):
            break
    while i < len(args):
        arg = args[i]
        arg = arg.strip('[]')
        arg = arg.split('=')[0]
        optional.append(arg)
        i += 1
    return (__tmp8, fixed, optional)


def build_signature(fixed: Sequence[str],
                    optional) -> str:
    args = []  # type: MutableSequence[str]
    args.extend(fixed)
    for arg in optional:
        if arg.startswith('*'):
            args.append(arg)
        else:
            args.append('%s=...' % arg)
    __tmp9 = '(%s)' % ', '.join(args)
    # Ad-hoc fixes.
    __tmp9 = __tmp9.replace('(self)', '')
    return __tmp9


def __tmp4(lines) :
    sigs = []
    class_sigs = []
    for line in lines:
        line = line.strip()
        m = re.match(r'\.\. *(function|method|class) *:: *[a-zA-Z_]', line)
        if m:
            __tmp9 = line.split('::')[1].strip()
            parsed = __tmp3(__tmp9)
            if parsed:
                __tmp8, fixed, optional = parsed
                if m.group(1) != 'class':
                    sigs.append((__tmp8, build_signature(fixed, optional)))
                else:
                    class_sigs.append((__tmp8, build_signature(fixed, optional)))

    return sorted(sigs), sorted(class_sigs)


def find_unique_signatures(sigs) -> List[Sig]:
    sig_map = {}  # type: MutableMapping[str, List[str]]
    for __tmp8, __tmp9 in sigs:
        sig_map.setdefault(__tmp8, []).append(__tmp9)
    result = []
    for __tmp8, name_sigs in sig_map.items():
        if len(set(name_sigs)) == 1:
            result.append((__tmp8, name_sigs[0]))
    return sorted(result)


def __tmp1(__tmp2) -> __typ1:
    return '__file__' not in __tmp2.__dict__ or __tmp2.__dict__['__file__'].endswith('.so')


def __tmp6(__tmp7, module_name: Optional[str] = None,
                 pyversion: Tuple[int, int] = (3, 5)) :
    if module_name:
        if pyversion[0] >= 3:
            version = '%d.%d' % (sys.version_info.major,
                                 sys.version_info.minor)
        else:
            version = '2'
        __tmp7.write('# Stubs for %s (Python %s)\n' % (module_name, version))
    __tmp7.write(
        '#\n'
        '# NOTE: This dynamically typed stub was automatically generated by stubgen.\n\n')


def __tmp0(__tmp5, __tmp8: str) :
    if not __tmp5:
        return None
    __tmp5 = __tmp5.lstrip()
    m = re.match(r'%s(\([a-zA-Z0-9_=, ]*\))' % __tmp8, __tmp5)
    if m:
        return m.group(1)
    else:
        return None
