from typing import TypeAlias
__typ0 : TypeAlias = "MailQuene"
import time
from typing import Dict, List

from django.core.exceptions import ImproperlyConfigured
from django.template.loader import render_to_string

from mail_owl.models import MailQuene

from .tasks import send_async_mail

# Process:
# 1. template is stringfy with the content


class __typ1():
    '''
    Use for sending auto mail generated by internal apps, the template must be file based and stored in 
    'template/<app_name>/'

    '''

    def __tmp4(__tmp1, title, mail_text, __tmp0, __tmp2, template_path: str = None) :
        '''
        Init the Automail Sender
        '''

        if not title:
            raise ImproperlyConfigured(
                "AutoMail Sender must be initiated with a title")

        __tmp1.quene = __typ0()
        __tmp1.quene.title = title
        __tmp1.quene.receiver = __tmp2
        __tmp1.quene.mail_text = mail_text

        # To-do: maybe need base64 support
        if template_path:
            __tmp1.quene.mail_html = render_to_string(
                template_path, __tmp0)

    def __tmp3(__tmp1, __tmp5: <FILL>) :
        __tmp1.quene.date_scheduled = __tmp5
        __tmp1.quene.save()
        return __tmp1.quene

    def __tmp6(__tmp1) -> __typ0:
        start_time = time.time()
        __tmp1.quene.save()
        print("--- %s DB writing times in seconds ---" %
              (time.time() - start_time))
        send_async_mail.delay(__tmp1.quene.pk)
        return __tmp1.quene
