# -*- coding: utf-8 -*-
import urllib

from zerver.lib.test_classes import WebhookTestCase
from zerver.models import get_realm, get_user

class TravisHookTests(WebhookTestCase):
    STREAM_NAME = 'travis'
    URL_TEMPLATE = u"/api/v1/external/travis?stream={stream}&api_key={api_key}"
    FIXTURE_DIR_NAME = 'travis'
    TOPIC = 'builds'

    def __tmp3(__tmp2) :
        """
        Build notifications are generated by Travis after build completes.

        The subject describes the repo and Stash "project". The
        content describes the commits pushed.
        """
        expected_message = (u"Author: josh_mandel\nBuild status: Passed :thumbs_up:\n"
                            u"Details: [changes](https://github.com/hl7-fhir/fhir-sv"
                            u"n/compare/6dccb98bcfd9...6c457d366a31), [build log](ht"
                            u"tps://travis-ci.org/hl7-fhir/fhir-svn/builds/92495257)")

        __tmp2.send_and_test_stream_message(
            'build',
            __tmp2.TOPIC,
            expected_message,
            content_type="application/x-www-form-urlencoded"
        )

    def __tmp0(__tmp2) :
        __tmp2.subscribe(__tmp2.test_user, __tmp2.STREAM_NAME)
        result = __tmp2.client_post(
            __tmp2.url,
            __tmp2.get_body('pull_request'),
            content_type="application/x-www-form-urlencoded"
        )
        __tmp2.assert_json_success(result)
        msg = __tmp2.get_last_message()
        __tmp2.assertNotEquals(msg.topic_name(), __tmp2.TOPIC)

    def __tmp1(__tmp2) :
        __tmp2.url = "{}&ignore_pull_requests=false".format(__tmp2.build_webhook_url())
        expected_message = (u"Author: josh_mandel\nBuild status: Passed :thumbs_up:\n"
                            u"Details: [changes](https://github.com/hl7-fhir/fhir-sv"
                            u"n/compare/6dccb98bcfd9...6c457d366a31), [build log](ht"
                            u"tps://travis-ci.org/hl7-fhir/fhir-svn/builds/92495257)")

        __tmp2.send_and_test_stream_message(
            'pull_request',
            __tmp2.TOPIC,
            expected_message,
            content_type="application/x-www-form-urlencoded"
        )

    def get_body(__tmp2, __tmp4: <FILL>) :
        return urllib.parse.urlencode({'payload': __tmp2.webhook_fixture_data("travis", __tmp4, file_type="json")})
