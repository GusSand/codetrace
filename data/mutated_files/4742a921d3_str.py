from typing import TypeAlias
__typ0 : TypeAlias = "MailQuene"
import time
from typing import Dict, List

from django.core.exceptions import ImproperlyConfigured
from django.template.loader import render_to_string

from mail_owl.models import MailQuene

from .tasks import send_async_mail

# Process:
# 1. template is stringfy with the content


class AutoMailSender():
    '''
    Use for sending auto mail generated by internal apps, the template must be file based and stored in 
    'template/<app_name>/'

    '''

    def __tmp0(self, title: <FILL>, mail_text, fill_in_context, __tmp1, template_path: str = None) :
        '''
        Init the Automail Sender
        '''

        if not title:
            raise ImproperlyConfigured(
                "AutoMail Sender must be initiated with a title")

        self.quene = __typ0()
        self.quene.title = title
        self.quene.receiver = __tmp1
        self.quene.mail_text = mail_text

        # To-do: maybe need base64 support
        if template_path:
            self.quene.mail_html = render_to_string(
                template_path, fill_in_context)

    def __tmp3(self, __tmp2) :
        self.quene.date_scheduled = __tmp2
        self.quene.save()
        return self.quene

    def send_now(self) :
        start_time = time.time()
        self.quene.save()
        print("--- %s DB writing times in seconds ---" %
              (time.time() - start_time))
        send_async_mail.delay(self.quene.pk)
        return self.quene
