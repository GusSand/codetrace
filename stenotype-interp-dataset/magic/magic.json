{"hexsha": "357ad94655b55a5de65645b359f819f4f0054ef6", "size": 2778, "ext": "ts", "lang": "TypeScript", "max_stars_repo_path": "src/functions/MagicMethod.ts", "max_stars_repo_name": "easylogic/sa-pa", "max_stars_repo_head_hexsha": "47e721a8015f8dda5cba79955450cdff23a7a5d8", "max_stars_repo_licenses": ["MIT"], "max_stars_count": 2.0, "max_stars_repo_stars_event_min_datetime": "2022-03-11T19:10:09.000Z", "max_stars_repo_stars_event_max_datetime": "2022-03-20T15:55:03.000Z", "max_issues_repo_path": "src/functions/MagicMethod.ts", "max_issues_repo_name": "easylogic/magica", "max_issues_repo_head_hexsha": "33e76ec17f4615c627c47392283831cdb11b6592", "max_issues_repo_licenses": ["MIT"], "max_issues_count": null, "max_issues_repo_issues_event_min_datetime": null, "max_issues_repo_issues_event_max_datetime": null, "max_forks_repo_path": "src/functions/MagicMethod.ts", "max_forks_repo_name": "easylogic/magica", "max_forks_repo_head_hexsha": "33e76ec17f4615c627c47392283831cdb11b6592", "max_forks_repo_licenses": ["MIT"], "max_forks_count": null, "max_forks_repo_forks_event_min_datetime": null, "max_forks_repo_forks_event_max_datetime": null, "content": "\nexport const MAGIC_METHOD_REG = /^@magic\\:([a-zA-Z][a-zA-Z0-9]*)[\\W]{1}(.*)*$/g;\nexport const MAGIC_METHOD = \"@magic:\";\nexport const SPLITTER = \"|\";\nexport const FUNC_REGEXP = /(([\\$a-z_\\-]+)\\([^\\(\\)]*\\)|([a-z_\\-]+))/gi;\nexport const FUNC_START_CHARACTER = \"(\";\nexport const FUNC_END_CHARACTER = \")\";\n\nexport interface PipeParam {\n    type: string;\n    value?: string;\n    args?: string[];\n    func?: string;    \n}\n\nexport interface PipeObject {\n    [key: string]: PipeParam[];\n}\n\nexport interface MagicMethodResult {\n    originalMethod: string;\n    method: string;\n    args: string[];\n    pipes: PipeParam[];\n    keys: PipeObject;\n}\n\nexport default class MagicMethod {\n\n    static make (str: string, ...args: string[]): string {\n        return `${MAGIC_METHOD}${str} ${args.join(SPLITTER)}`;\n    }\n\n    static check(str: string): boolean {\n        return str.match(MAGIC_METHOD_REG) !== null;\n    }\n\n    static parse (str: string): MagicMethodResult | undefined  {\n        const matches = str.match(MAGIC_METHOD_REG);\n    \n        if (!matches) {\n            return undefined;\n        }    \n\n\n        const result = matches[0].split(\"@magic:\")[1].split(SPLITTER).map(item => item.trim());\n\n        let [ initializer, ...pipes ] = result;\n        const [ method, ...args ] = initializer.split(\" \");\n\n        const pipeList = pipes.map(it => {\n            return this.parsePipe(it);\n        }).filter(it => it.value);\n\n        const pipeObjects: PipeObject = {\n            'function': [],\n            'keyword': [],\n            'value': []\n        };\n        \n        pipeList.forEach(pipe => {\n            if (pipe.type === \"function\") {\n                pipeObjects.function.push(pipe);\n            } else if (pipe.type === \"keyword\") {\n                pipeObjects.keyword.push(pipe);\n            } else {\n                pipeObjects.value.push(pipe);\n            }\n        });\n\n        return {\n            originalMethod: str,\n            method,\n            args,\n            pipes: pipeList,\n            keys: pipeObjects\n        };\n    }\n\n    static parsePipe(it: string): PipeParam {\n        const result = it.match(FUNC_REGEXP);\n\n        if (!result) {\n            return {\n                type: \"value\",\n                value: it\n            };\n        }\n\n        const [value] = result;\n\n        if (value.includes(FUNC_START_CHARACTER)) {\n\n            const [func, rest] = value.split(FUNC_START_CHARACTER)\n            const [args] = rest.split(FUNC_END_CHARACTER);        \n            return {\n                type: \"function\",\n                value,\n                func,\n                args: args.split(\",\").map(it => it.trim()).filter(Boolean)\n            }\n        } \n\n        return {\n            type: \"keyword\",\n            value: result[0]\n        }\n    }\n}", "avg_line_length": 25.4862385321, "max_line_length": 95, "alphanum_fraction": 0.5014398848, "annotation_sites": 25, "type_definitions": 3, "loc": 71, "functions": 9, "loc_per_function": 7.333333333333333, "estimated_tokens": 689}