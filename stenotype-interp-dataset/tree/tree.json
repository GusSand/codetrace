{"hexsha": "ed707857103d58beb481bd7cdef24308b16ff916", "size": 2566, "ext": "ts", "lang": "TypeScript", "max_stars_repo_path": "src/utils/Tree.ts", "max_stars_repo_name": "GaoNeng-wWw/gachi", "max_stars_repo_head_hexsha": "643c3bfc2b89e53fd73376d8ad44f7773948ef16", "max_stars_repo_licenses": ["MIT"], "max_stars_count": 1.0, "max_stars_repo_stars_event_min_datetime": "2022-02-17T12:11:11.000Z", "max_stars_repo_stars_event_max_datetime": "2022-02-17T12:11:11.000Z", "max_issues_repo_path": "src/utils/Tree.ts", "max_issues_repo_name": "GaoNeng-wWw/gachi", "max_issues_repo_head_hexsha": "643c3bfc2b89e53fd73376d8ad44f7773948ef16", "max_issues_repo_licenses": ["MIT"], "max_issues_count": null, "max_issues_repo_issues_event_min_datetime": null, "max_issues_repo_issues_event_max_datetime": null, "max_forks_repo_path": "src/utils/Tree.ts", "max_forks_repo_name": "GaoNeng-wWw/gachi", "max_forks_repo_head_hexsha": "643c3bfc2b89e53fd73376d8ad44f7773948ef16", "max_forks_repo_licenses": ["MIT"], "max_forks_count": null, "max_forks_repo_forks_event_min_datetime": null, "max_forks_repo_forks_event_max_datetime": null, "content": "type Node_Type = Node_;\nexport class Node_{\n\tpublic data:any;\n\tpublic children: Node_Type[];\n\tpublic parent: Node_ | null;\n\tconstructor(data: any){\n\t\tthis.data = data;\n\t\tthis.children = [];\n\t\tthis.parent = null;\n\t}\n}\nexport default class tree {\n\tpublic static head: Node_ = new Node_('head');\n\tpublic static path:string[][] | string[] = [];\n\tpublic static rootNode = '';\n    \n\tstatic append(parent:any=undefined, data:any){\n\t\tconst node = new Node_(data);\n\t\tif (!parent){\n\t\t\tthis.head?.children.push(node);\n\t\t\treturn;\n\t\t} else {\n\t\t\tconst stack = [...this.head?.children] as Node_[];\n\t\t\tlet prevIdx = null;\n\t\t\twhile (stack?.length){\n\t\t\t\tconst shiftItem = stack.shift();\n\t\t\t\tprevIdx = shiftItem;\n\t\t\t\tconst children = shiftItem?.children;\n\t\t\t\tif (shiftItem?.data?.data === parent.data){\n\t\t\t\t\tnode.parent = prevIdx as Node_;\n\t\t\t\t\tshiftItem?.children.push(node);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tchildren?.forEach((node:Node_)=>{\n\t\t\t\t\t\tstack.push(node);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic getTree(){\n\t\treturn this.head;\n\t}\n\tstatic async getPath(){\n\t\t// let rootNode = ;\n\t\tconst rootNode = this.getRoot();\n\t\tconst stack = [...this.head.children];\n\t\tlet path_:string[] = [];\n\t\twhile (stack.length){\n\t\t\tconst shiftItem = stack.shift();\n\t\t\tpath_.push(shiftItem?.data.data);\n\t\t\tconst children = shiftItem?.children;\n\t\t\tif (shiftItem?.data.type === 'item'){\n\t\t\t\t(this.path as string[][]).push([...path_ as string[]]);\n\t\t\t\tif (shiftItem.parent){\n\t\t\t\t\twhile (\n\t\t\t\t\t\tpath_[path_.length - 1] !== rootNode?.data.data\n\t\t\t\t\t){\n\t\t\t\t\t\tpath_.pop();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpath_ = [];\n\t\t\t\t}\n\t\t\t} else if (!shiftItem?.children.length){\n\t\t\t\t(this.path as string[][]).push([...path_ as string[]]);\n\t\t\t\tpath_.pop();\n\t\t\t\tif (shiftItem?.parent){\n\t\t\t\t\twhile (\n\t\t\t\t\t\tpath_[path_.length - 1] !== rootNode?.data.data\n\t\t\t\t\t){\n\t\t\t\t\t\tpath_.pop();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpath_ = [];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let i=children?.length as number-1; i>=0; i--){\n\t\t\t\tstack.unshift(children?.[i] as Node_);\n\t\t\t}\n\t\t}\n\t\treturn this.path;\n\t}\n\tprivate static getRoot(){\n\t\tconst stack = [...tree.head.children];\n\t\twhile (stack.length){\n\t\t\tconst shiftItem = stack.shift();\n\t\t\tif (shiftItem?.data.type === 'parent'){\n\t\t\t\treturn shiftItem;\n\t\t\t} else {\n\t\t\t\tconst children = shiftItem?.children;\n\t\t\t\tfor (let i=children?.length as number-1; i>=0; i--){\n\t\t\t\t\tstack.unshift(children?.[i] as Node_);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\tstatic clearTree(){\n\t\tthis.head = new Node_('head');\n\t\tthis.path = [];\n\t\tthis.rootNode = '';\n\t\treturn true;\n\t}\n}\n\n/**\n * a {\n *  b{\n *      d\n *   }\n *  c{\n *   }\n * }\n * \n * \n * \n * \n */\n", "avg_line_length": 21.5630252101, "max_line_length": 59, "alphanum_fraction": 0.5744349182, "annotation_sites": 32, "type_definitions": 1, "loc": 101, "functions": 7, "loc_per_function": 11.428571428571429, "estimated_tokens": 861}