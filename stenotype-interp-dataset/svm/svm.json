{"hexsha": "3fe8267a4b8aed719bfa5cfc4d16f245a2d85629", "size": 4809, "ext": "ts", "lang": "TypeScript", "max_stars_repo_path": "packages/typechain-target-fuels/src/parser/parseSvmTypes.ts", "max_stars_repo_name": "FuelLabs/fuels-ts", "max_stars_repo_head_hexsha": "425b68c57e61cb0e17aa71f35a9b0a9171c82dfa", "max_stars_repo_licenses": ["Apache-2.0"], "max_stars_count": 7.0, "max_stars_repo_stars_event_min_datetime": "2022-01-04T05:44:35.000Z", "max_stars_repo_stars_event_max_datetime": "2022-03-09T16:42:28.000Z", "max_issues_repo_path": "packages/typechain-target-fuels/src/parser/parseSvmTypes.ts", "max_issues_repo_name": "FuelLabs/fuels-ts", "max_issues_repo_head_hexsha": "425b68c57e61cb0e17aa71f35a9b0a9171c82dfa", "max_issues_repo_licenses": ["Apache-2.0"], "max_issues_count": 60.0, "max_issues_repo_issues_event_min_datetime": "2022-01-11T02:44:02.000Z", "max_issues_repo_issues_event_max_datetime": "2022-03-27T18:49:49.000Z", "max_forks_repo_path": "packages/typechain-target-fuels/src/parser/parseSvmTypes.ts", "max_forks_repo_name": "FuelLabs/fuels-ts", "max_forks_repo_head_hexsha": "425b68c57e61cb0e17aa71f35a9b0a9171c82dfa", "max_forks_repo_licenses": ["Apache-2.0"], "max_forks_count": 5.0, "max_forks_repo_forks_event_min_datetime": "2022-01-17T14:13:25.000Z", "max_forks_repo_forks_event_max_datetime": "2022-03-13T07:31:35.000Z", "content": "export declare type SvmType =\n  | BoolType\n  | U8intType\n  | U16intType\n  | U32intType\n  | U64intType\n  | ByteType\n  | B256Type\n  | AddressType\n  | StringType\n  | ArrayType\n  | TupleType\n  | UnknownType;\n/**\n * Like SvmType but with void\n */\nexport declare type SvmOutputType = SvmType | VoidType;\n\nexport declare type BoolType = {\n  type: 'bool';\n  originalType: string;\n};\nexport declare type U8intType = {\n  type: 'u8';\n  bits: 8;\n  originalType: string;\n};\nexport declare type U16intType = {\n  type: 'u16';\n  bits: 16;\n  originalType: string;\n};\nexport declare type U32intType = {\n  type: 'u32';\n  bits: 32;\n  originalType: string;\n};\nexport declare type U64intType = {\n  type: 'u64';\n  bits: 64;\n  originalType: string;\n};\nexport declare type ByteType = {\n  type: 'byte';\n  size: 1;\n  originalType: string;\n};\nexport declare type B256Type = {\n  type: 'b256';\n  originalType: string;\n};\nexport declare type AddressType = {\n  type: 'address';\n  originalType: string;\n};\nexport declare type StringType = {\n  type: 'string';\n  size: number;\n  originalType: string;\n};\nexport declare type ArrayType = {\n  type: 'array';\n  itemType: SvmType;\n  size?: number;\n  originalType: string;\n};\nexport declare type TupleType = {\n  type: 'tuple';\n  structName: string;\n  components: SvmSymbol[];\n  originalType: string;\n};\nexport declare type UnknownType = {\n  type: 'unknown';\n  originalType: string;\n};\n\nexport declare type VoidType = {\n  type: 'void';\n};\n\nexport declare type SvmSymbol = {\n  type: SvmType;\n  name: string;\n};\n\nconst stringRegEx = /str\\[([0-9]+)\\]/;\nconst arrayRegEx = /\\[(\\w+);\\s*([0-9]+)\\]/;\n/**\n * Used to check if type is a custom struct\n */\nconst structRegEx = /^(struct|enum)/;\n\n/**\n * Converts valid file names to valid javascript symbols and does best effort to make them readable.\n * Example: ds-token.test becomes DsTokenTest\n */\nexport function normalizeName(rawName: string): string {\n  const transformations: ((s: string) => string)[] = [\n    (s) => s.replace(/\\s+/g, '-'), // spaces to - so later we can automatically convert them\n    (s) => s.replace(/\\./g, '-'), // replace \".\"\n    (s) => s.replace(/_/g, '-'), // replace \"_\"\n    (s) => s.replace(/-[a-z]/g, (match) => match.substr(-1).toUpperCase()), // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, ''), // delete any '-' left\n    (s) => s.replace(/^\\d+/, ''), // removes leading digits\n    (s) => s.charAt(0).toUpperCase() + s.slice(1),\n  ];\n\n  const finalName = transformations.reduce((s, t) => t(s), rawName);\n\n  if (finalName === '') {\n    throw new Error(`Can't guess class name, please rename file: ${rawName}`);\n  }\n\n  return finalName;\n}\n\n/**\n * Parses the SvmType from the JSON ABI; recusively on non-primatives\n */\nexport function parseSvmType(rawType: string, components?: SvmSymbol[], name?: string): SvmType {\n  const stringMatch = rawType.match(stringRegEx);\n  if (stringMatch !== null) {\n    const length = stringMatch[1];\n\n    return {\n      type: 'string',\n      size: parseInt(length, 10),\n      originalType: rawType,\n    };\n  }\n\n  const arrayMatch = rawType.match(arrayRegEx);\n  if (arrayMatch !== null) {\n    const type = arrayMatch[1];\n    const length = arrayMatch[2];\n    return {\n      type: 'array',\n      itemType: parseSvmType(type, components),\n      size: parseInt(length, 10),\n      originalType: rawType,\n    };\n  }\n\n  // If type starts with struct/enum we can treat it as tuple.\n  // In this way, the parser can process all components from the struct.\n  if (structRegEx.test(rawType)) {\n    if (!components) throw new Error(`${rawType} specified without components!`);\n    return {\n      type: 'tuple',\n      components,\n      originalType: rawType,\n      // Remove struct prefix enabling the code parser\n      // To create a Class with the structName\n      structName: rawType.replace(structRegEx, '').trim(),\n    };\n  }\n\n  switch (rawType) {\n    case 'u8':\n      return { type: 'u8', bits: 8, originalType: rawType };\n    case 'u16':\n      return { type: 'u16', bits: 16, originalType: rawType };\n    case 'u32':\n      return { type: 'u32', bits: 32, originalType: rawType };\n    case 'u64':\n      return { type: 'u64', bits: 64, originalType: rawType };\n    case 'bool':\n      return { type: 'bool', originalType: rawType };\n    case 'address':\n      return { type: 'address', originalType: rawType };\n    case 'b256':\n      return { type: 'b256', originalType: rawType };\n    case 'byte':\n      return { type: 'byte', size: 1, originalType: rawType };\n    case 'tuple':\n      if (!components) throw new Error('Tuple specified without components!');\n      return {\n        type: 'tuple',\n        components,\n        originalType: rawType,\n        structName: normalizeName(name || ''),\n      };\n    default:\n  }\n\n  return { type: 'unknown', originalType: rawType };\n}\n", "avg_line_length": 25.4444444444, "max_line_length": 126, "alphanum_fraction": 0.6257018091, "annotation_sites": 37, "type_definitions": 16, "loc": 94, "functions": 11, "loc_per_function": 7.2727272727272725, "estimated_tokens": 1439}