{"hexsha": "7363963d6c6296f85899573195a6a4eeb5571846", "size": 2615, "ext": "ts", "lang": "TypeScript", "max_stars_repo_path": "src/query-date.ts", "max_stars_repo_name": "AntonKhorev/osm-note-viewer", "max_stars_repo_head_hexsha": "05e5132983c6ea41735e05248141403df711b122", "max_stars_repo_licenses": ["MIT"], "max_stars_count": 3.0, "max_stars_repo_stars_event_min_datetime": "2022-03-23T10:12:53.000Z", "max_stars_repo_stars_event_max_datetime": "2022-03-29T04:17:40.000Z", "max_issues_repo_path": "src/query-date.ts", "max_issues_repo_name": "AntonKhorev/osm-note-viewer", "max_issues_repo_head_hexsha": "05e5132983c6ea41735e05248141403df711b122", "max_issues_repo_licenses": ["MIT"], "max_issues_count": null, "max_issues_repo_issues_event_min_datetime": null, "max_issues_repo_issues_event_max_datetime": null, "max_forks_repo_path": "src/query-date.ts", "max_forks_repo_name": "AntonKhorev/osm-note-viewer", "max_forks_repo_head_hexsha": "05e5132983c6ea41735e05248141403df711b122", "max_forks_repo_licenses": ["MIT"], "max_forks_count": null, "max_forks_repo_forks_event_min_datetime": null, "max_forks_repo_forks_event_max_datetime": null, "content": "export interface ValidDateQuery {\n\tdateType: 'valid'\n\tdate: number\n}\n\nexport interface InvalidDateQuery {\n\tdateType: 'invalid'\n\tmessage: string\n}\n\nexport interface EmptyDateQuery {\n\tdateType: 'empty'\n}\n\nexport type DateQuery = ValidDateQuery | InvalidDateQuery | EmptyDateQuery\n\nexport function toReadableDate(date: number | undefined): string {\n\tif (date==null) return ''\n\tconst pad=(n: number): string => ('0'+n).slice(-2)\n\tconst dateObject=new Date(date*1000)\n\tconst dateString=\n\t\tdateObject.getUTCFullYear()+\n\t\t'-'+\n\t\tpad(dateObject.getUTCMonth()+1)+\n\t\t'-'+\n\t\tpad(dateObject.getUTCDate())+\n\t\t' '+\n\t\tpad(dateObject.getUTCHours())+\n\t\t':'+\n\t\tpad(dateObject.getUTCMinutes())+\n\t\t':'+\n\t\tpad(dateObject.getUTCSeconds())\n\treturn dateString\n}\n\nexport function toUrlDate(date: number): string {\n\tconst pad=(n: number): string => ('0'+n).slice(-2)\n\tconst dateObject=new Date(date*1000)\n\tconst dateString=\n\t\tdateObject.getUTCFullYear()+\n\t\tpad(dateObject.getUTCMonth()+1)+\n\t\tpad(dateObject.getUTCDate())+\n\t\t'T'+\n\t\tpad(dateObject.getUTCHours())+\n\t\tpad(dateObject.getUTCMinutes())+\n\t\tpad(dateObject.getUTCSeconds())+\n\t\t'Z'\n\treturn dateString\n}\n\nexport function toDateQuery(readableDate: string): DateQuery {\n\tlet s=readableDate.trim()\n\tlet m=''\n\tlet r=''\n\t{\n\t\tif (s=='') return empty()\n\t\tconst match=s.match(/^((\\d\\d\\d\\d)-?)(.*)/)\n\t\tif (!match) return invalid()\n\t\tnext(match)\n\t}{\n\t\tif (s=='') return complete()\n\t\tconst match=s.match(/^((\\d\\d)-?)(.*)/)\n\t\tif (!match) return invalid()\n\t\tr+='-'\n\t\tnext(match)\n\t}{\n\t\tif (s=='') return complete()\n\t\tconst match=s.match(/^((\\d\\d)[T ]?)(.*)/)\n\t\tif (!match) return invalid()\n\t\tr+='-'\n\t\tnext(match)\n\t}{\n\t\tif (s=='') return complete()\n\t\tconst match=s.match(/^((\\d\\d):?)(.*)/)\n\t\tif (!match) return invalid()\n\t\tr+=' '\n\t\tnext(match)\n\t}{\n\t\tif (s=='') return complete()\n\t\tconst match=s.match(/^((\\d\\d):?)(.*)/)\n\t\tif (!match) return invalid()\n\t\tr+=':'\n\t\tnext(match)\n\t}{\n\t\tif (s=='') return complete()\n\t\tconst match=s.match(/^((\\d\\d)Z?)$/)\n\t\tif (!match) return invalid()\n\t\tr+=':'\n\t\tnext(match)\n\t}\n\treturn complete()\n\tfunction next(match: RegExpMatchArray): void {\n\t\tm+=match[1]\n\t\tr+=match[2]\n\t\ts=match[3]\n\t}\n\tfunction empty(): EmptyDateQuery {\n\t\treturn {\n\t\t\tdateType: 'empty'\n\t\t}\n\t}\n\tfunction invalid(): InvalidDateQuery {\n\t\tlet message=`invalid date string`\n\t\tif (m!='') message+=` after ${m}`\n\t\treturn {\n\t\t\tdateType: 'invalid',\n\t\t\tmessage\n\t\t}\n\t}\n\tfunction complete(): ValidDateQuery {\n\t\tconst completionTemplate='2000-01-01 00:00:00Z'\n\t\tconst completedReadableDate=r+completionTemplate.slice(r.length)\n\t\treturn {\n\t\t\tdateType: 'valid',\n\t\t\tdate: Date.parse(completedReadableDate)/1000\n\t\t}\n\t}\n}\n", "avg_line_length": 21.974789916, "max_line_length": 74, "alphanum_fraction": 0.6401529637, "annotation_sites": 33, "type_definitions": 4, "loc": 100, "functions": 9, "loc_per_function": 12.666666666666666, "estimated_tokens": 971}